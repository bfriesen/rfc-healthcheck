<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-01" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications
use HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>The API Health Response Format (or, interchangeably, “health check response
format”) uses the JSON format described in <xref target="RFC8259"/> and has the media type
“application/health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
The value of the status field is tightly related with the HTTP response code
returned by the health endpoint. For “pass” and “warn” statuses HTTP response
code in the 2xx-3xx range MUST be used. For “fail” status HTTP response code
in the 4xx-5xx range MUST be used. In case of the “warn” status, endpoint
SHOULD return HTTP status in the 2xx-3xx range and additional information
SHOULD be provided, utilizing optional fields of the response.  <vspace blankLines='1'/>
A health endpoint is only meaningful in the context of the component it
indicates the health of. It has no other meaning or purpose. As such, its
health is a conduit to the health of the component. Clients SHOULD assume that
the HTTP response code returned by the health endpoint is applicable to the
entire component (e.g. a larger API or a microservice). This is compatible
with the behavior that current infrastructural tooling expects:
load-balancers, service discoveries and others, utilizing health-checks.</t>
  <t>version: (optional) public version of the service.</t>
  <t>releaseID: (optional) in well-designed APIs, backwards-compatible changes in
the service should not update a version number. APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of an API may change much more frequently, which leads
to the importance of having separate “release number” or “releaseID” that is
different from the public version of the API.</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an object representing status of sub-components of the
service in question. Please refer to the “The Details Object” section for more
information.</t>
  <t>links: (optional) an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.  If a “self” link is provided, it MAY be used by clients to
check health via HTTP response code, as mentioned above.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
</list></t>

</section>
<section anchor="the-details-object" title="The Details Object">

<t>The “details” object MAY have a number of unique keyes, one for each logical
sub-components. Since each sub-component may be backed by several nodes with
varying health statuses, the key points to an array of objects. In case of a
single-node sub-component (or if presence of nodes is not relevant), a
single-element array should be used as the value, for consistency.</t>

<t>The key identifying an element in the object should be a unique string within
the details section. It MAY have two parts: “{componentName}:{metricName}”, in
which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not 
contain a colon, in the name, since colon is used as a separator.</t>
  <t>metricName: (optional) name of the metrics that the status is reported for.
MUST not contain a colon, in the name, since colon is used as a separator and
can be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value eside of the equation, each “component details” object in the array
MAY have one of the following object keys:</t>

<t><list style="symbols">
  <t>componentId: (optional) unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>
  <t>componentType: (optional) SHOULD be present if componentName is present. Type
of the component. Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>component</t>
          <t>datastore</t>
          <t>system</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>
  <t>metricUnit: (optional) SHOULD be present if metricValue is present. Could be
one of:
  <list style="symbols">
      <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>time: the date-time, in ISO8601 format, at which the reading of the
metricValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>
  <t>output: (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component.</t>
  <t>links: (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component.</t>
</list></t>

</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/health+json

  HTTP/1.1 200 OK
  Content-Type: application/health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseID": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "details": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "metricValue": 250,
        "metricUnit": "ms",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "type": "datastore",
        "metricValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "metricValue": 1209600.245,
        "metricUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "metricValue": 85,
        "metricUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "metricValue": 85,
        "metricUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "metricValue": 8.5,
        "metricUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "metricValue": 5500,
        "metricUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type for health check response is application/health+json.</t>

<t>Media type name: application
Media subtype name: health+json
Required parameters: n/a
Optional parameters: n/a
Encoding considerations: binary
Security considerations: Health+JSON shares security issues common to all JSON
content types. See RFC 8259 Section #12 for additional information.</t>

<t>Health+JSON allows utilization of Uniform Resource Identifiers (URIs) and as such
shares security issues common to URI usage. See RFC 3986 Section #7
for additional information.</t>

<t>Since Hyper+JSON can carry wide variety of data, some data may require privacy
or integrity services. This specification does not prescribe any specific
solution and assumes that concrete implementations will utilize common, trusted
approaches such as TLS/HTTPS, OAuth2 etc.</t>

<t>Interoperability considerations: None
Published specification: this RFC draft
Applications which use this media: Various</t>

<t>Fragment identifier considerations: Health+JSON follows RFC6901 for implementing
URI Fragment Identification standard to JSON content types.</t>

<t>Restrictions on usage: None</t>

<t>Additional information:</t>

<t><list style="numbers">
  <t>Deprecated alias names for this type: n/a</t>
  <t>Magic number(s): n/a</t>
  <t>File extension(s): .json</t>
  <t>Macintosh file type code: TEXT</t>
  <t>Object Identifiers: n/a</t>
</list></t>

<t>General Comments:</t>

<t>Person to contact for further information:</t>

<t><list style="numbers">
  <t>Name: Irakli Nadareishvili</t>
  <t>Email: irakli@gmail.com</t>
</list></t>

<t>Intended usage: Common
Author/Change controller: Irakli Nadareishvili</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAMTLtloAA+1bbXMbuZH+Pr8Cxf0Q2+FQFPXOe6lTZHmtnC35LDm5XGpr
C5wBSayGA2YwI4rZ8lZ+yN2fyy+5p7uB4VAv61xl96pyl/2wpmaARqPRL083
etI0TWpbF2as3hpd1HN1NjfZrfpo/NKV3qg3rlroWk1dpd7e3HxQpx8ufKIn
k8rcjZPcZaVeYG5e6Wmd2lLnujI21UubzplcmhG5dLib5LrGwNFw9zjJ8HPm
qvVY2XLqksQuq7Gqq8bXo+HwZDhKQESP1demNJUukpWrbmeVa5bj5Nas8Vc+
VhdlbarS1OlrWjlJfK3L/FtduBKLrI1Plnasfl+7rK/wP1vmpqz7yruqrszU
49d6EX7Ulc3wKnOLpQ4/FhiMV7YsbGm+SRLd1HNXjROVJgr/2dKDgYG6lN36
+Z0tLL8RYVxU+rawT7zGWsbUY7W7u68OIOrTO1M2hl9ltoY4Ls1K/Q67lUeu
KWsS0qfS1iZX1zXE5vmVWWhbQHq80L/M6K8B+OZ3TYWdz+t6Od7ZWa1Wg2ll
/HxSNNXE85ik5BO1dwYbUh/fnI12d0/Cz72T40P6+RV+H4xGh+Hxwcnxcfh5
NNrbDz+PRweYl9ARbhPEmGH4eXi815m5G5fZ26OZaZoqPYFQIPckuZlbr6BQ
DUlfLSu3dN54pZU31Z3NjBKFUqxQqor6OX1CPwdCu3S1+faS/le7bz8anZvK
J8mrV+BAnb++uLn6OFbLwmhQqczC3RlVEw/eZLV1pZoYEDVq2UwKC43Fo1ev
iE2jrPcNWCusl4V5GpuAyjRNxNOmzBX4+kc6CY+jmNl63kzoBHaimexU0yyY
CW9qR+j+80BWWTiQr0xG4hDiWKVLMtIZBNrWPaJItD4KiWyuyxkJFHsizs3/
nD8yDVv7nYXG9IpoXxujdOEdRGCEyV94lTVVRSvCJuvGw1z47cX5zRsFJ6Dp
vG9N1cfySbt858XAmno6cNVsB9qw8wXPwjukw17YPC9MknxFrqFyecOHKJK8
A79qob9zFaxMuSlEC10oWVfAtb2z5YxZg69QKzNR8CUYM7EFdrdcxuP3SQNV
YS37/vug558/K+1pf7YinYWvccVA0aJBXYlUs6ztwtDCGOhNIusayHABB6P0
HexXY7XAHUmruyw9WHhT3Bk/wO5UbslpTRocYeLXOIqFV5PGFrVaWVpRlc1i
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
UNoSzih+mWfZizbLtHZpzo2Y/w2Q4gxpdT4AAA==

-->

</rfc>

