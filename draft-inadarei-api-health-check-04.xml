<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-04" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States of America</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2020"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications use
HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for caching, failover or circuit-breaking, are
essential to the ability of providing highly-available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. However, there is currently no standard
for the health check output response, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>Health Check Response Format for HTTP APIs uses the JSON format described in
<xref target="RFC8259"/> and has the media type “application/health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<section anchor="status" title="status">

<t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:</t>

<t><list style="symbols">
  <t>“pass”: healthy (acceptable aliases: “ok” to support Node’s Terminus and
“up” for Java’s SpringBoot),</t>
  <t>“fail”: unhealthy (acceptable aliases: “error” to support Node’s Terminus and
“down” for Java’s SpringBoot), and</t>
  <t>“warn”: healthy, with some concerns.</t>
</list></t>

<t>The value of the status field is case-insensitive and is tightly related with
  the HTTP response code returned by the health endpoint. For “pass” status,
  HTTP response code in the 2xx-3xx range MUST be used. For “fail” status,
  HTTP response code in the 4xx-5xx range MUST be used. In case of the “warn”
  status, endpoints MUST return HTTP status in the 2xx-3xx range, and
  additional information SHOULD be provided, utilizing optional fields of the
  response.</t>

<t>A health endpoint is only meaningful in the context of the component it
  indicates the health of. It has no other meaning or purpose. As such, its
  health is a conduit to the health of the component. Clients SHOULD assume that
  the HTTP response code returned by the health endpoint is applicable to the
  entire component (e.g. a larger API or a microservice). This is compatible
  with the behavior that current infrastructural tooling expects:
  load-balancers, service discoveries and others, utilizing health-checks.</t>

</section>
<section anchor="version" title="version">

<t>version: (optional) public version of the service.</t>

</section>
<section anchor="releaseid" title="releaseId">

<t>releaseId: (optional) in well-designed APIs, backwards-compatible changes in
  the service should not update a version number. APIs usually change their
  version number as infrequently as possible, to preserve stable interface.
  However, implementation of an API may change much more frequently, which leads
  to the importance of having separate “release number” or “releaseId” that is
  different from the public version of the API.</t>

</section>
<section anchor="notes" title="notes">

<t>notes: (optional) array of notes relevant to current state of health</t>

</section>
<section anchor="output" title="output">

<t>output: (optional) raw error output, in case of “fail” or “warn” states. This
  field SHOULD be omitted for “pass” state.</t>

</section>
<section anchor="checks" title="checks">

<t>checks (optional) is an object that provides detailed health statuses of
additional downstream systems and endpoints which can affect the overall health
of the main API. Please refer to the “The Checks Object” section for more
information.</t>

</section>
<section anchor="links" title="links">

<t>links (optional) is an object containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. All values of this object SHALL be URIs. Keys MAY
also be URIs. Per web-linking standards <xref target="RFC8288"/> a link
relationship SHOULD either be a common/registered one or be indicated as a URI,
to avoid name clashes.  If a “self” link is provided, it MAY be used by clients
to check health via HTTP response code, as mentioned above.</t>

</section>
<section anchor="serviceid" title="serviceId">

<t>serviceId (optional) is a unique identifier of the service, in the application
scope.</t>

</section>
<section anchor="description" title="description">

<t>description (optional) is a human-friendly description of the service.</t>

</section>
</section>
<section anchor="the-checks-object" title="The Checks Object">

<t>The “checks” object MAY have a number of unique keys, one for each logical
downstream dependency or sub-component. Since each sub-component may be
backed by several nodes with varying health statuses, these keys point to arrays
of objects. In case of a single-node sub-component (or if presence of nodes is
not relevant), a single-element array SHOULD be used as the value, for
consistency.</t>

<t>The key identifying an element in the object SHOULD be a unique string within
the details section. It MAY have two parts: “{componentName}:{measurementName}”,
in which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not
contain a colon, in the name, since colon is used as a separator.</t>
  <t>measurementName: (optional) name of the measurement type (a data point type)
that the status is reported for. MUST not contain a colon, in the name, since
colon is used as a separator. The observation’s name can be one of:
  <list style="symbols">
      <t>A pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Open API Spec document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value side of the equation, each “component details” object in the array
SHOULD have at least one key, and MAY have any or none of the following object
keys:</t>

<section anchor="componentid" title="componentId">

<t>componentId: (optional) is a unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>

</section>
<section anchor="componenttype" title="componentType">

<t>componentType: (optional) SHOULD be present if componentName is present. It’s
a type of the component and could be one of:</t>

<t><list style="symbols">
  <t>Pre-defined value from this spec. Pre-defined values include:
  <list style="symbols">
      <t>component</t>
      <t>datastore</t>
      <t>system</t>
    </list></t>
  <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="observedvalue" title="observedValue">

<t>observedValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>

</section>
<section anchor="observedunit" title="observedUnit">

<t>observedUnit (optional) SHOULD be present if observedValue is present. Clarifies
the unit of measurement in which observedUnit is reported, e.g. for a time-based
value it is important to know whether the time is reported in seconds, minutes,
hours or something else. To make sure unit is denoted by a well-understood name
or an abbreviation, it SHOULD be one of:</t>

<t><list style="symbols">
  <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="thresholdvalue" title="thresholdValue">

<t>thresholdValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal. Determines the value above (or below) which the status
changes from “pass” state to “warn” state or back. thresholdValue MUST only be
present if observedValue is also present.</t>

</section>
<section anchor="status-1" title="status">

<t>status (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="affectedendpoints" title="affectedEndpoints">

<t>affectedEndpoints (optional) is a JSON array containing URI Templates as defined
by <xref target="RFC6570"/>. This field SHOULD be omitted if the “status” field is present
and has value equal to “pass”. A typical API has many URI endpoints. Most of the
time we are interested in the overall health of the API, without diving into
details. That said, sometimes operational and resilience middleware needs to
know more details about the health of the API (which is why “checks” property
provides details). In such cases, we often need to indicate which particular
endpoints are affected by a particular check’s troubles vs. other endpoints that
may be fine.</t>

</section>
<section anchor="time" title="time">

<t>time (optional) is the date-time, in ISO8601 format, at which the reading of the
observedValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>

</section>
<section anchor="output-1" title="output">

<t>output (optional) has the exact same meaning as the top-level “output” element,
but for the sub-component/downstream dependency represented by the details
object. As is the case for the top-level element, this field SHOULD be omitted
for “pass” state of a downstream dependency.</t>

</section>
<section anchor="links-1" title="links">

<t>links (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="additional-keys" title="Additional Keys">

<t>In addition to the above keys, additional user-defined keys MAY be
included in the ‘component details’ object. Implementations MAY ignore
any keys that are not part of the list of standard keys above.</t>

</section>
</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/health+json

  HTTP/1.1 200 OK
  Content-Type: application/health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseId": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceId": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "checks": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 250,
        "observedUnit": "ms",
        "status": "pass",
        "affectedEndpoints" : [
          "/users/{userId}",
          "/customers/{customerId}/status",
          "/shopping/{anything}"
        ],
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "observedValue": 1209600.245,
        "observedUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 8.5,
        "observedUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 5500,
        "observedUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases, the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type for health check response is application/health+json.</t>

<t><list style="symbols">
  <t>Media type name: application</t>
  <t>Media subtype name: health+json</t>
  <t>Required parameters: n/a</t>
  <t>Optional parameters: n/a</t>
  <t>Encoding considerations: binary</t>
  <t>Security considerations: Health+JSON shares security issues common to all JSON
  content types. See RFC 8259 Section #12 for additional information.  <vspace blankLines='1'/>
Health+JSON allows utilization of Uniform Resource Identifiers (URIs) and as such
  shares security issues common to URI usage. See RFC 3986 Section #7
  for additional information.  <vspace blankLines='1'/>
Since health+json can carry wide variety of data, some data may require privacy
  or integrity services. This specification does not prescribe any specific
  solution and assumes that concrete implementations will utilize common, trusted
  approaches such as TLS/HTTPS, OAuth2 etc.</t>
  <t>Interoperability considerations: None</t>
  <t>Published specification: this RFC draft</t>
  <t>Applications which use this media: Various</t>
  <t>Fragment identifier considerations: Health+JSON follows RFC6901 for
implementing URI Fragment Identification standard to JSON content types.</t>
  <t>Restrictions on usage: None</t>
  <t>Additional information:
  <list style="numbers">
      <t>Deprecated alias names for this type: n/a</t>
      <t>Magic number(s): n/a</t>
      <t>File extension(s): .json</t>
      <t>Macintosh file type code: TEXT</t>
      <t>Object Identifiers: n/a</t>
    </list></t>
  <t>General Comments:</t>
  <t>Person to contact for further information:
  <list style="numbers">
      <t>Name: Irakli Nadareishvili</t>
      <t>Email: irakli@gmail.com</t>
    </list></t>
  <t>Intended usage: Common</t>
  <t>Author/Change controller: Irakli Nadareishvili</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses SHOULD be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service. Any method of cache lifetime negotiation provided by HTTP spec is
acceptable (e.g. ETags are just fine).</t>
  <t>Custom link relation types, as well as the URIs for variables, SHOULD lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

