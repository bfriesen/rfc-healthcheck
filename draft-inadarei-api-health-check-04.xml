<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-04" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States of America</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2019"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications use
HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for caching, failover or circuit-breaking, are
essential to the ability of providing highly-available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. However, there is currently no standard
for the health check output response, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>Health Check Response Format for HTTP APIs uses the JSON format described in
<xref target="RFC8259"/> and has the media type “application/health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<section anchor="status" title="status">

<t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:</t>

<t><list style="symbols">
  <t>“pass”: healthy (acceptable aliases: “ok” to support Node’s Terminus and
“up” for Java’s SpringBoot),</t>
  <t>“fail”: unhealthy (acceptable aliases: “error” to support Node’s Terminus and
“down” for Java’s SpringBoot), and</t>
  <t>“warn”: healthy, with some concerns.</t>
</list></t>

<t>The value of the status field is case-insensitive and is tightly related with
  the HTTP response code returned by the health endpoint. For “pass” status,
  HTTP response code in the 2xx-3xx range MUST be used. For “fail” status,
  HTTP response code in the 4xx-5xx range MUST be used. In case of the “warn”
  status, endpoints MUST return HTTP status in the 2xx-3xx range, and
  additional information SHOULD be provided, utilizing optional fields of the
  response.</t>

<t>A health endpoint is only meaningful in the context of the component it
  indicates the health of. It has no other meaning or purpose. As such, its
  health is a conduit to the health of the component. Clients SHOULD assume that
  the HTTP response code returned by the health endpoint is applicable to the
  entire component (e.g. a larger API or a microservice). This is compatible
  with the behavior that current infrastructural tooling expects:
  load-balancers, service discoveries and others, utilizing health-checks.</t>

</section>
<section anchor="version" title="version">

<t>version: (optional) public version of the service.</t>

</section>
<section anchor="releaseid" title="releaseId">

<t>releaseId: (optional) in well-designed APIs, backwards-compatible changes in
  the service should not update a version number. APIs usually change their
  version number as infrequently as possible, to preserve stable interface.
  However, implementation of an API may change much more frequently, which leads
  to the importance of having separate “release number” or “releaseId” that is
  different from the public version of the API.</t>

</section>
<section anchor="notes" title="notes">

<t>notes: (optional) array of notes relevant to current state of health</t>

</section>
<section anchor="output" title="output">

<t>output: (optional) raw error output, in case of “fail” or “warn” states. This
  field SHOULD be omitted for “pass” state.</t>

</section>
<section anchor="checks" title="checks">

<t>checks (optional) is an object that provides detailed health statuses of
additional downstream systems and endpoints which can affect the overall health
of the main API. Please refer to the “The Checks Object” section for more
information.</t>

</section>
<section anchor="links" title="links">

<t>links (optional) is an object containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. All values of this object SHALL be URIs. Keys MAY
also be URIs. Per web-linking standards <xref target="RFC8288"/> a link
relationship SHOULD either be a common/registered one or be indicated as a URI,
to avoid name clashes.  If a “self” link is provided, it MAY be used by clients
to check health via HTTP response code, as mentioned above.</t>

</section>
<section anchor="serviceid" title="serviceId">

<t>serviceId (optional) is a unique identifier of the service, in the application
scope.</t>

</section>
<section anchor="description" title="description">

<t>description (optional) is a human-friendly description of the service.</t>

</section>
</section>
<section anchor="the-checks-object" title="The Checks Object">

<t>The “checks” object MAY have a number of unique keys, one for each logical
downstream dependency or sub-component. Since each sub-component may be
backed by several nodes with varying health statuses, these keys point to arrays
of objects. In case of a single-node sub-component (or if presence of nodes is
not relevant), a single-element array SHOULD be used as the value, for
consistency.</t>

<t>The key identifying an element in the object SHOULD be a unique string within
the details section. It MAY have two parts: “{componentName}:{measurementName}”,
in which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not
contain a colon, in the name, since colon is used as a separator.</t>
  <t>measurementName: (optional) name of the measurement type (a data point type)
that the status is reported for. MUST not contain a colon, in the name, since
colon is used as a separator. The observation’s name can be one of:
  <list style="symbols">
      <t>A pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Open API Spec document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value side of the equation, each “component details” object in the array
MAY have one of the following object keys:</t>

<section anchor="componentid" title="componentId">

<t>componentId: (optional) is a unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>

</section>
<section anchor="componenttype" title="componentType">

<t>componentType: (optional) SHOULD be present if componentName is present. It’s
a type of the component and could be one of:</t>

<t><list style="symbols">
  <t>Pre-defined value from this spec. Pre-defined values include:
  <list style="symbols">
      <t>component</t>
      <t>datastore</t>
      <t>system</t>
    </list></t>
  <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="observedvalue" title="observedValue">

<t>observedValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>

</section>
<section anchor="observedunit" title="observedUnit">

<t>observedUnit (optional) SHOULD be present if observedValue is present. Clarifies
the unit of measurement in which observedUnit is reported, e.g. for a time-based
value it is important to know whether the time is reported in seconds, minutes,
hours or something else. To make sure unit is denoted by a well-understood name
or an abbreviation, it SHOULD be one of:</t>

<t><list style="symbols">
  <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="status-1" title="status">

<t>status (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="affectedendpoints" title="affectedEndpoints">

<t>A typical API has many URI endpoints. Most of the time we are interested in
the overall health of the API, without diving into details. That said, sometimes
operational and resilience middleware needs to know more details about the health
of the API (which is why “checks” property provides details). In such cases,
we often need to indicate which particular endpoints are affected by a particular
check’s troubles vs. other endpoints that may be fine. The <spanx style="verb">affectedEndpoints</spanx>
property is a JSON array containing URI Templates as defined by <xref target="RFC6570"/>.</t>

</section>
<section anchor="time" title="time">

<t>time (optional) is the date-time, in ISO8601 format, at which the reading of the
observedValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>

</section>
<section anchor="output-1" title="output">

<t>output (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="links-1" title="links">

<t>links (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/health+json

  HTTP/1.1 200 OK
  Content-Type: application/health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseId": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceId": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "checks": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 250,
        "observedUnit": "ms",
        "status": "pass",
        "affectedEndpoints" : [
          "/users/{userId}",
          "/customers/{customerId}/status",
          "/shopping/{anything}"
        ],
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "observedValue": 1209600.245,
        "observedUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 8.5,
        "observedUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 5500,
        "observedUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases, the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type for health check response is application/health+json.</t>

<t><list style="symbols">
  <t>Media type name: application</t>
  <t>Media subtype name: health+json</t>
  <t>Required parameters: n/a</t>
  <t>Optional parameters: n/a</t>
  <t>Encoding considerations: binary</t>
  <t>Security considerations: Health+JSON shares security issues common to all JSON
  content types. See RFC 8259 Section #12 for additional information.  <vspace blankLines='1'/>
Health+JSON allows utilization of Uniform Resource Identifiers (URIs) and as such
  shares security issues common to URI usage. See RFC 3986 Section #7
  for additional information.  <vspace blankLines='1'/>
Since health+json can carry wide variety of data, some data may require privacy
  or integrity services. This specification does not prescribe any specific
  solution and assumes that concrete implementations will utilize common, trusted
  approaches such as TLS/HTTPS, OAuth2 etc.</t>
  <t>Interoperability considerations: None</t>
  <t>Published specification: this RFC draft</t>
  <t>Applications which use this media: Various</t>
  <t>Fragment identifier considerations: Health+JSON follows RFC6901 for implementing
URI Fragment Identification standard to JSON content types.</t>
  <t>Restrictions on usage: None</t>
  <t>Additional information:
  <list style="numbers">
      <t>Deprecated alias names for this type: n/a</t>
      <t>Magic number(s): n/a</t>
      <t>File extension(s): .json</t>
      <t>Macintosh file type code: TEXT</t>
      <t>Object Identifiers: n/a</t>
    </list></t>
  <t>General Comments:</t>
  <t>Person to contact for further information:
  <list style="numbers">
      <t>Name: Irakli Nadareishvili</t>
      <t>Email: irakli@gmail.com</t>
    </list></t>
  <t>Intended usage: Common</t>
  <t>Author/Change controller: Irakli Nadareishvili</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses SHOULD be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service. Any method of cache lifetime negotiation provided by HTTP spec is
acceptable (e.g. ETags are just fine).</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIANvq1FwAA+1c63IbyXX+P0/RBf2wJAMgCJESiVwqNMW1aK/EjUjZcVwu
uzHTIGY5mEGmZwjBKrn8IMnL+Unyfef0XEBSFztOapN4f6yAQU/36XP5zqVP
czQaRVVaZW5mXjmbVUtzunTxjXnr/LrIvTPfFOXKVmZRlObV1dV35uS7cx/Z
+bx0t7MoKeLcrvBuUtpFNUpzm9jSpSO7TkdLmW4Uc7rR5CBKbIWB08n+cRTj
43VRbmcmzRdFFKXrcmaqsvbVdDI5nkwjTGJn5qcud6XNok1R3lyXRb2eRTdu
i2/JzJznlStzV41ecuUo8pXNk9/arMixyNb5aJ3OzK+rIh4a/C/NE5dXQ+OL
sirdwuPTdhU+VGUa46e4WK1t+LDCYPyU5lmau99Eka2rZVHOIjOKDP5Lcw8C
xuaN7tYvb9MslV+UGeelvcnSB37GWs5VM7O/f2AOweqTW5fXTn6K0wrseOM2
5lfYrT4q6rwik97laeUSc1mBbd4UC3OyciDayii3smkGRsqa/3TNb2NsQX6r
SzBhWVXr2d7eZrMZL0rnl/OsLudexkS5CDe9ddibefvN6XR//zh8fHZ89Jwf
H+Hz4XT6PDw+mh4dhY8vps8O2qeHzXvPD19MZhApBLs7N4ZPmjFHz3qT7Dcr
PnuGSaLRaGTsHKyCNKLoapl6AzWrKROzLot14cEEa7wrb9PYGVUzI2pmykZr
Fw9o7VjnzovK/fYN/1cVv33rbOJKH0VPn4ICc/by/Ori7cysM2cxS+lWxa0z
FWnwLq7SIjdzh0mdWdfzDCLgo6dPSaYzqfc1SMtSrwvLa2IYJrZ8EU/rPDGg
6+8pFA+pXKfVsp5TGHuN8eyVizgYj2xqT+f9x7GusiowfeliskMnxyr9KZt5
xmHutLg3I+d6q1PES5tfk6HYEyl3fz59NJi08nsri9dLzn3pnLGZL8ACp0T+
yJu4LkuuCEutag8jkl/Pz66+MYAGS3nfuHKI5aN2+d4P49RVi3FRXu9BG/a+
gDeyQwp7lSZJ5qLoEQGjLJJahKicvAW9ZmW/L0rYHs1qVUAXctEVUJ3epvm1
kAYEMRs3N0AYjJmnGXa3Xjfi96b2LhIt+/Ah6PnHj8Z67i8tqbNAoCIbGy4a
1JVT1esqXTkujIHQNkHWxIGHK8COsbcwZYvVAnXk1s6yeLDyLrt1fozdmSQl
lM1ritBvIYqVj+Z1mlVmk3JFk9eruSsFP7DS0EAXofrETW606ogLEgprCjsw
KFrZGw6Mi1LNTF5LXJx6kjMUnY9tvMRjfAHxsB0sh4dpGddpNYLPkCmG1LbI
eQ91SG1G9srmur2CZ7epzL9Mr5fZdhSYAc77Iqtl/2oPUFv3HjsnJGzShFIt
oSkyS7GG++BYrOGLRbWhkldLS/vJUkJp3l84Ah2gMPkEpAS+jc2rYuNuqamV
LJ+2qp1tAS5GOGrLJFIMuINQRV2t66qdlS5JTXpHtC7l3CRzG4iM5tanscmw
ckZSWnzFz2keZ3UCscOmRA+DAGPos2+Vch9KCYqorJX1NyO/hugWmFMnIj/f
eXutCrkzAG/1qLv3oonBNXomn17n/MHmVQRcyTJHaBlSM/Gl2FCeNt+albM5
Pi/qDBRD3UVOQfg2LgsP80sXC0eeRukKYEzwD6yh5cxdtXEu70ZBhQr46mti
T2B/+ntZru8J+oLwgsmqZ06owrZ7NhLNEXwsUg0DyF7MBuf01HyTQd+oiIlb
Z8VW3NIIW8/hi/oKFygSeqE3JobG5ZUuG+QKtwc3vqQlpiQz0CqKtW18hrcL
jgbIzoEKiczna/jHtBJTB87kzkH6Y1J3dltktw0v4esQT6ixx4UojFi6mluj
p0NZKSyDBdMAlC6JGOoIb1x+m5ZFLpslAS4uFGLUnATrwwq+nR+xULcI5iIM
Qf0x0FeyIwRyQHBRYU4KFapIX+n+rU5LkbkaeT8CSCCUXAKAQV+cg0bOtW/A
7GeXF2+ap2IDDFI+fhSzFEwDnTAGMtC2dJp1gf2bO6bbNzaRTUG9G0ev7K0q
2cZl2UhJS/oaJyHAui4ZtFDZVgXt5LoosBDjGwYwhNZOfR8ZhCaNDp0W+S0x
EnqvLgvhr2H8683g9bvLq8FQ/zVvLuTz27N/fnf+9uwlP1++Ovn22/ZDM+Ly
1cW7b/F7FD51b55evH599ualvvz65Ff4h0IZXHx3dX7x5uTbgXrsviwETgvo
TCRmvC5dUEjATgxXpIgkvGdg+fGj7I/GEFKNJsmIoq/PPSgzf0/A/RWjnrRl
D0v1xcCdJIUz366dGfQAbU+l/OPvfZEPQOI5rbTAjhgegQ7xLoIO1C1Y/oq6
UiF/MWVRgLzUZYl5PFDUHTxRE6WLQO5SrIMsZZQHhDx6FPBZkhb8OzOPg8on
T0B+QrKwxc3SiRMQWwrBbhM7QWXj2K0r8YjgDmLacUTGSljq8Zo3QcC1RMMN
/N7ajDFqo99CFGgywIrB2no/mAWd35rHvSVsliIeBqWDAqYGmft6vUYuBWVN
HGK7K4lZao0TmHkM6rWYpPkZPDcGXK5LLP8TsOvJUFdjgIDV6vzz67myLMqv
WzIpNvknFw3DsDCigLzb5lCjI18ArCDsGAEgQccYjRDBrSYOCrxXadPpg0JE
oAhifMo0R8SO5xUiFuIbQN7SHjg/5uMUosRtQEH3jG9VXRI15ts+4rg8ESQa
0wbMn/747xTOn/74H4EK8vCByUJMPX3/fvTs/XtTMrQ3AhDAdShC0k5H7n/t
dAeY7vAT0yHuJB8aHmFmshczR6aZu92L13d1xzuBykN0NxKzSZIGE+rDcNDu
uWt8OPwY4sJM3f4dqwvk0d+GDYqIT+5ym+Ir8uxOhCK0CSC8r5qNslpQ5ESI
tBI32VhtT4bFAvypBH0QFhZizGFi2mxwC2NzgsipZhiAaANzNT6HbgmrJoic
G5faTrxLw9ichuAicAW6AoQW3/wXa54QoCBJi1QKMBv9UdlnwGM3vh6D1syW
105cqwSMSL0YyilwPWHykwpwSZ2lYgQVQgJZfO6W8KWCSkDzJlWEwEskaSWy
trrsxVTuPULQyrNukBU2Gc1tZmm6LOcEpETMGTP/YJhPwxT2+76O9PNFmjxw
GeO9pIfhA5C50aQnIeNvxrSooOvp+zB51g3OkyhqP+7MAWUKoQJjZZeE4GyO
DBd2k/hRx502M0/zIMPWCSCKAgQB85FCsqoGZjdUafw6bjxljbh7G2bSdBRz
7Y6lvyaf4YE0hcF36KUnDaydwb4cVxYAJF3i6xeWezZdLrQbpou7lEwazrIl
YAUtR7ID7emWA/4uEQMjsbEJtT9oOqYD1lsJqhdmqXGWd2tbcr+DwN2whQEV
btByfKBKlHK6LkNYIPqSqR+WI0hVGbI85FkZq+h/erKzZWklS5CfRNa3VlKP
ndKGEiy6JfNpwhdF+u/OjKXdGPFvYRBTjRZO1UHKzsRj6eReDQk7Uz/UwWCx
SqtKo8/gyvUN3ZVqeRSF3KevkrQPU8y/h0Up4wKgMoyrQINLdusCUoKMerBM
v8vKpl01dQfNEVrYVwkzy7CQhiwDeiU+yhpWBTGsbCpqMzbfNSW4BWOgonEv
dMunuokLoVm8WKjNce/Ur6jnKbB/MgC4wf3LP5/cPkEeBFDXOFBdeJt1vnt7
7jW2ZG0UsSWXg09AyAAu6MzCQETPzVSq7n3HZefMgYilu2jeefwTcCXEafIb
nZLSp6E8hE1Sxubnbuu5WCT5V/v4OzBs4+YjUiRmE3Ib36RBR0cMjIXiqN3i
Ml032hSqD3MnHmi1QohcumsWBxGiwkFKyCmZonq9RHMorD5kDcXeFmkipXAk
vRbBKGgy54yfB95li4HylolR67lTZVoIK+iRQrrM+bRwErh1iwj+vjMbkoKV
pkokZw7tUsUPoElIbj/elT/zb8CRSXlIkMKwyjvoPmyigF7WEMG/rMMimn2s
tbTY+3JvoWWN3GG0gFfKE0Btf+h9f2Lu6bomgQM14kGjFeQcENLtlPjClpAw
wr9QZKKslkhbXGMLWdQz28StHU9I4i0l6+v5qBdbXEppQ17d+UWQfc7CVHyj
Mgs5DwCS6CG+/daW287ZtggyDCVPkhdSbioOEdYTCnRnfie+bNKvEae/Q8pj
kJ0u1FUFn6FEACrpJxuwZh7QTOPUXwVc74BUNDBkjGKGUtmMQiZIJo27ZDyo
zFYrPaaZM6hLa7bN3K2qsVSLV8gj+HcpkwvYtucMEjq2kq028MO2rJgRfWi3
/QYm9nH2ATGlr7VeIk+Q3TPOCKDrXch9Q+CpaiaT9QnzIUn0UuTaWWLHZ6kG
s0wqwYBYeZNN9pRGIn1wPjItEhJLsiJvbYmvDkPhTH6hiTTMt42zL8ox6Lmz
xR2KhITGfXTjNM9/bLWCH3QMj55INGWrfk6X0p0z4FD/2ZH/NcTLFj9Dvphx
MadhC3AgMVVs1PqewOmCoexTJCTQ4LaOpNlniFt4AoWgF+h+d4Rv6r8zSYOf
hhBXQUqfNFh5la5ceISN5appvnlNjiMCHQr7WsloSmM8mFByQsHrJgeEIHWu
S0alDO6wdQ90Wlke1AzN+cmbE5mdfpnpQFtq1lXgMUKs1uZP8KcluQctq9JY
HS/8ROy8FPbKOnM9LzvX7TSOhCBkuVslKQhZMy/HJEC1BMuOxVcidBEpq40V
zXSJk6iDSGIlCl5qlCui3ErZ6/uaJXsRpF/bWLPVu4Zm2zNhGWNOT970E1ah
NmchlFW+VCAVL/uQUYVSTkAWOO6hTHcBqJbA+hLq0NXiJOXK4TngVlj2oCrP
i+LmCcDqIu/ADDqbtOaCIFzUZKjwPugANaBR62Ma/0esjFpYUt3VSlJbYgpv
ENq12tXOSifc+zL7Oj9secDh21zAmub8IdrxAXt9J7boDohhzHVWpeusgWPf
ZZ0sUfcoeik6BR/vbNnsODBiSPdSNdIXI+hSC3E14929XgFqervl15399usX
dFoVF9iBXY2Q5Dc6gx/5KNQu75UgqHqx5IQ9PBETuwcWfwGctOuE78RTXzHK
1u8a8/8NN37guHG5sdesz3wVYjBvFY/lkl9QKZC+9r/uaHKreaQJKoTYXyrz
IXYK8p2FkGcYYtRhpNY4bPLqEmlBxfBxd3n2vnSr89sXrWiH1B0rOs1sSVzx
EnHVnIzH/r2goQ2cdlbsxQeASjJ5IdyjwxzNEWIlkVqXjm2KFxLUUtl3avly
6N+POLAmgr4iT4AyLGlDnYfREqroJRovVq4SabqM1cKrAoH3De2mDFvgkYxj
USLosdhYONznSRMVKSK9TD7Zt5UG0E/7oekObvw1DVnVr2/GQ9W9Li9tdbKZ
Q7PsZ8/kzOhvNv8/ZfO751I7YX9IiNx7C98uR7sN8eGXqliPtDthoNWsQRSy
oaGZ192R6h2n/WASCtNQk4Vhhep0kx4paii5Wk1yyVlTaYqiE7pIprcSIpHq
FdlG5WnrUYgI2HARBCzmuHEiKSltOq9GGd2vUvWKhcP2ODvRRiG8WzRUUviW
bEqToRowFkFi22sPoApgqZRlDohb+5SkQYWn+b5FDqkfNZtva0d3qmbc62PF
rZTltm1XI1hLd0W1vVvV808kuRaDY5IIyNkQAJDgCgUkoLG0AInMGdO4Bob2
anukuJGDmlQ3TKuNyHeqsoCCYu1bsKY1sTCDGKjWEgzjEE2YfndPuL+L2r1I
sChORp1Hr25HSV+51ToThJCzaA1uQJugCvsT9ST6kcg+ikQDdkNR0TjMMOJv
kvSdX14cPZ/sty0aoFm5wqFMh7vketdXmo0l1sdFyR4NPQbR8xnf5aHqPUJG
yB6q0OjB2ZrJg2KzbFQ4n/+IULRmMpCyoYSnI0Ir7QxcEjpzbS8AJNumkywK
x04hXt2tTv/gLf5TVdwfILHm7L3lmYi5CCz+wx/+AFD+6dmVCQ0HUsfc2x/v
yzmKr2Ykn6/Qd/J4Us7DZ+YTrQpROLTlDGY6mZiLn+PJqTYujDTh+NSrGEcl
G3F0WWQz2N/7kb12//Ds+WSis4TqwMzEWcEOjQ943LQ4zMIJA73MIByk8OG+
PulOYvhsPB1P9bkcnODZrweD38iDIAmM0gFthZaPFpNn7nA6XYz2FwcHo4PJ
8+noeH54ODo+PHqxON6Pj+ODsF6vjMoXO6xm3/bvm0RQxwZcnJkP2jQA7PMw
kdLO+kUSEim/mzBOx3a5K9dJFsnzeDGdj/bnz93o4GB/OrKT+dFo8Xzx4sXx
C/t8kujG775O2cgETSbVH7UDHhg1PZw88CvDUk6x8v13HxBP+OUemg5Mt0UZ
sVdjZr/3gf+cJx97L/PHGDEM/BgHNB8xaC8suDvWL4v1Gqa39wGuV0LXj4N2
wG96RFXK6cF0sn80muyP9l9cTZ7Nnj2fHRz96w5LOjUJDz9Gvbl6MuxVtX5A
Inxx+KCM5Fjvv8aO3lPBxFavm8V43kKT0DsAdp2OG4xhS3cyZ+lir+FCgIhO
WB8fZLcWCr/A34ZBWh34HHf2p5NjoM54enD4GUX/Sj3/LA8fVp51PetVTL9K
bZ4vkoP9524yOjqeTkYH+5PF6Dh+Acdx8OJ4MpksXkynL/pUkcvc6ec06cuM
Ovocf+Dy2c//MJf+CprW8G7438Wc6f8B5uwo1sqteMXpf4lujT/Hv5+mP/l/
q1iHh5PPOeDXn2LNn4VMX6NWUWDSHaQfSFL4GZCX3/ckFArr9Ee+l/tBLtur
lrwcVmQJpg4L3xvXm6o/npRFHyXARdx76eJabtSc8sQ0CSkvovamSa1JL917
mGXKE3wmkZuly0NNrHdg3G/kMK8tgtm0qH2EKL8ofSg91j5c0eq3WTCeL0pE
e7xIJjPaqrLs9JK0V9o9bXMSHe1c0ehSU2alDbUscGLjPJkIPQ9s98xDH75B
FN2UAtnH6rWFGE8lF2Ad7B4/rnZbku/eUOg6HLpOvLuBvPT8v+7m0PuH/S6F
5mfkNb0R/VzgqXkbuo+ZuuPnCmHezOR7Fj9dNI2U9386y+Mi0QtB/X3NzDzN
bbnFiFYT7o7Qbu8fSwbvl5C+HHvr2HCLLtQf2RWQZZLri1I2fdncC0TJi2a8
t8dmby4non+0P9X67IOdo9L5aXZIkMspvn9uyuThXbiU8bYpEZ63x1LIPVkS
1E5vq+2bMusXN8PyRM1bNh3tbCbqaH8h83yRfG3K6IlRigcwpHJ77xoUY1Qt
Q+lZOLU6NJyzCHhr421z2MIC2LVQHpKm0G/Wnrkpd1iAkGIo82Dpu5fiZHsw
J6wI97QCj3oFD7ZZ86qAuXu1Z5NC1CoFF3g21GvBTlu8odhlwcTVt5Xiq28v
95gFXw7NxQnsc2pcFbNl4PzuzaK7SvgGjgDjvgsd88nuHmcKKRSQ3DXEyJP+
DS0t/rTQI3Y8M78A14lPT803pb3WE4XuMPNzZhC6L+R27LHWmTr+wMoiak47
aaOKQR5dhb7QstiumYiJ6z1noR1viA62PDh5UNXUDeyPzUvWOwLosTFfy9Td
BZdKag1EBb4wJVBfp3E46Hnsn3S/PRubb3h9kl1zOasG8us41CSMOeC7MUup
fmkWHCmgxRavmbk6+5crGXU4Dv1QfZNsYClcGgfa6jXuGWWM39X+pFIYa7ln
UZdSinxoy28+f5Ebezz7xL1r1bycNfvA5FPRZLJZrpHvnWo3bPAPmSs/sRDv
ysQsAmcuudbrUHQaVvoMC2NepzfOnKzqPPEOhnJWpjfml2nGbrif1bxKZX4C
Wyn4mDb4ljoCA2v+ZVOTtATDlq6vefeqaXRcwOWxq2tsTnLRqde2vOG9JCri
0so9NTNHeCRHCDKR3pCnN4ACe+OsT7OtuL5TXg5sLsJdElXw+c79H+zrl3T/
4YYpkOxBh2zaW6DN3UupPoPejZE6g5bNnVuzAWqV5ok0M7Vt/q1D7fe4z7Fz
kxVBvXlQI4G7XkORg3VKL9uO2NsD4bPLsUWfUGsaYJbYEgzSSlFs6bK1YfY9
ahrRGxjqehtpl68ecvi+qQSvRW8t8TBc3QiB3dBsizqEPzbB7BXiqKjf7kz/
JAdNe3irewz+6nWI3f5WafS2C0gy6V29NO2lxRDScFAHFTsy2nFRn9xXv+Es
dMBbI3+VIOf8WbpwWo3nqZYEu5+pUw6eGLliTpfSu1zZ3aBeFhtIVq8D0sUp
v6S8zkcr3bV0q1JC2bbtS4dKVfGy0do6TxuTfvny4nKkpf5opyuftsJ7IzAD
OTvUVdoN5e66qPTcdedMT2/BsJNHmrp7V6D0YO/syl777hSRRxlPyN9TKcLt
SlHRXlpheTrbVL7l8JIWy5CAU/OWhF4hYNM9eEDFCSeEXfCMjUhzba73L7z0
UUsMW696Jrx7Y68X5a94DUoc5INBrVz6sf0wZWO3XIR/maE7GPl0QMw8iFgy
aGn/u9CD3XT6Rw+/3FyYDFqIV5v4XpsX5m5bhPPZVjOjVpDhxO3BqYX1sFmR
Kv/igV6Gl78rkLX3sA/k9OnE6+lznfFPjgSeFTV5RjfV6OgnGPBYF4p6cz7p
aXOrvYCj8PcqeCa91QNOq6FmODDcUBMiOZTbMBmbO9PeRgSd38LJ8DkbZ5VM
oKf8ZRJX6t3Xg8mBeQypAZ/gip4wurBti7eMRdSiPC7mPKaLgslDudbbLzCU
W/LS6qBn/wLZ9XpUFaNELjf8Jzd0TizARgAA

-->

</rfc>

