<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-04" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States of America</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2019"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications use
HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for caching, failover or circuit-breaking, are
essential to the ability of providing highly-available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. However, there is currently no standard
for the health check output response, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>Health Check Response Format for HTTP APIs uses the JSON format described in
<xref target="RFC8259"/> and has the media type “application/health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<section anchor="status" title="status">

<t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:</t>

<t><list style="symbols">
  <t>“pass”: healthy (acceptable aliases: “ok” to support Node’s Terminus and
“up” for Java’s SpringBoot),</t>
  <t>“fail”: unhealthy (acceptable aliases: “error” to support Node’s Terminus and
“down” for Java’s SpringBoot), and</t>
  <t>“warn”: healthy, with some concerns.</t>
</list></t>

<t>The value of the status field is case-insensitive and is tightly related with
  the HTTP response code returned by the health endpoint. For “pass” status,
  HTTP response code in the 2xx-3xx range MUST be used. For “fail” status,
  HTTP response code in the 4xx-5xx range MUST be used. In case of the “warn”
  status, endpoints MUST return HTTP status in the 2xx-3xx range, and
  additional information SHOULD be provided, utilizing optional fields of the
  response.</t>

<t>A health endpoint is only meaningful in the context of the component it
  indicates the health of. It has no other meaning or purpose. As such, its
  health is a conduit to the health of the component. Clients SHOULD assume that
  the HTTP response code returned by the health endpoint is applicable to the
  entire component (e.g. a larger API or a microservice). This is compatible
  with the behavior that current infrastructural tooling expects:
  load-balancers, service discoveries and others, utilizing health-checks.</t>

</section>
<section anchor="version" title="version">

<t>version: (optional) public version of the service.</t>

</section>
<section anchor="releaseid" title="releaseId">

<t>releaseId: (optional) in well-designed APIs, backwards-compatible changes in
  the service should not update a version number. APIs usually change their
  version number as infrequently as possible, to preserve stable interface.
  However, implementation of an API may change much more frequently, which leads
  to the importance of having separate “release number” or “releaseId” that is
  different from the public version of the API.</t>

</section>
<section anchor="notes" title="notes">

<t>notes: (optional) array of notes relevant to current state of health</t>

</section>
<section anchor="output" title="output">

<t>output: (optional) raw error output, in case of “fail” or “warn” states. This
  field SHOULD be omitted for “pass” state.</t>

</section>
<section anchor="checks" title="checks">

<t>checks (optional) is an object that provides detailed health statuses of
additional downstream systems and endpoints which can affect the overall health
of the main API. Please refer to the “The Checks Object” section for more
information.</t>

</section>
<section anchor="links" title="links">

<t>links (optional) is an object containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. All values of this object SHALL be URIs. Keys MAY
also be URIs. Per web-linking standards <xref target="RFC8288"/> a link
relationship SHOULD either be a common/registered one or be indicated as a URI,
to avoid name clashes.  If a “self” link is provided, it MAY be used by clients
to check health via HTTP response code, as mentioned above.</t>

</section>
<section anchor="serviceid" title="serviceId">

<t>serviceId (optional) is a unique identifier of the service, in the application
scope.</t>

</section>
<section anchor="description" title="description">

<t>description (optional) is a human-friendly description of the service.</t>

</section>
</section>
<section anchor="the-checks-object" title="The Checks Object">

<t>The “checks” object MAY have a number of unique keys, one for each logical
downstream dependency or sub-component. Since each sub-component may be
backed by several nodes with varying health statuses, these keys point to arrays
of objects. In case of a single-node sub-component (or if presence of nodes is
not relevant), a single-element array SHOULD be used as the value, for
consistency.</t>

<t>The key identifying an element in the object SHOULD be a unique string within
the details section. It MAY have two parts: “{componentName}:{measurementName}”,
in which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not
contain a colon, in the name, since colon is used as a separator.</t>
  <t>measurementName: (optional) name of the measurement type (a data point type)
that the status is reported for. MUST not contain a colon, in the name, since
colon is used as a separator. The observation’s name can be one of:
  <list style="symbols">
      <t>A pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Open API Spec document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value side of the equation, each “component details” object in the array
SHOULD have at least one key, and MAY have any or none of the following object keys:</t>

<section anchor="componentid" title="componentId">

<t>componentId: (optional) is a unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>

</section>
<section anchor="componenttype" title="componentType">

<t>componentType: (optional) SHOULD be present if componentName is present. It’s
a type of the component and could be one of:</t>

<t><list style="symbols">
  <t>Pre-defined value from this spec. Pre-defined values include:
  <list style="symbols">
      <t>component</t>
      <t>datastore</t>
      <t>system</t>
    </list></t>
  <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="observedvalue" title="observedValue">

<t>observedValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>

</section>
<section anchor="observedunit" title="observedUnit">

<t>observedUnit (optional) SHOULD be present if observedValue is present. Clarifies
the unit of measurement in which observedUnit is reported, e.g. for a time-based
value it is important to know whether the time is reported in seconds, minutes,
hours or something else. To make sure unit is denoted by a well-understood name
or an abbreviation, it SHOULD be one of:</t>

<t><list style="symbols">
  <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="status-1" title="status">

<t>status (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="affectedendpoints" title="affectedEndpoints">

<t>A typical API has many URI endpoints. Most of the time we are interested in
the overall health of the API, without diving into details. That said, sometimes
operational and resilience middleware needs to know more details about the health
of the API (which is why “checks” property provides details). In such cases,
we often need to indicate which particular endpoints are affected by a particular
check’s troubles vs. other endpoints that may be fine. The <spanx style="verb">affectedEndpoints</spanx>
property is a JSON array containing URI Templates as defined by <xref target="RFC6570"/>.</t>

</section>
<section anchor="time" title="time">

<t>time (optional) is the date-time, in ISO8601 format, at which the reading of the
observedValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>

</section>
<section anchor="output-1" title="output">

<t>output (optional) has the exact same meaning as the top-level “output” element,
but for the sub-component/downstream dependency represented by the details
object. As is the case for the top-level element, this field SHOULD be omitted
for “pass” state of a downstream dependency.</t>

</section>
<section anchor="links-1" title="links">

<t>links (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="additional-keys" title="Additional Keys">

<t>In addition to the above keys, additional user-defined keys MAY be
included in the ‘component details’ object. Implementations MAY ignore
any keys that are not part of the list of standard keys above.</t>

</section>
</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/health+json

  HTTP/1.1 200 OK
  Content-Type: application/health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseId": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceId": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "checks": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 250,
        "observedUnit": "ms",
        "status": "pass",
        "affectedEndpoints" : [
          "/users/{userId}",
          "/customers/{customerId}/status",
          "/shopping/{anything}"
        ],
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "observedValue": 1209600.245,
        "observedUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 8.5,
        "observedUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 5500,
        "observedUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases, the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type for health check response is application/health+json.</t>

<t><list style="symbols">
  <t>Media type name: application</t>
  <t>Media subtype name: health+json</t>
  <t>Required parameters: n/a</t>
  <t>Optional parameters: n/a</t>
  <t>Encoding considerations: binary</t>
  <t>Security considerations: Health+JSON shares security issues common to all JSON
  content types. See RFC 8259 Section #12 for additional information.  <vspace blankLines='1'/>
Health+JSON allows utilization of Uniform Resource Identifiers (URIs) and as such
  shares security issues common to URI usage. See RFC 3986 Section #7
  for additional information.  <vspace blankLines='1'/>
Since health+json can carry wide variety of data, some data may require privacy
  or integrity services. This specification does not prescribe any specific
  solution and assumes that concrete implementations will utilize common, trusted
  approaches such as TLS/HTTPS, OAuth2 etc.</t>
  <t>Interoperability considerations: None</t>
  <t>Published specification: this RFC draft</t>
  <t>Applications which use this media: Various</t>
  <t>Fragment identifier considerations: Health+JSON follows RFC6901 for implementing
URI Fragment Identification standard to JSON content types.</t>
  <t>Restrictions on usage: None</t>
  <t>Additional information:
  <list style="numbers">
      <t>Deprecated alias names for this type: n/a</t>
      <t>Magic number(s): n/a</t>
      <t>File extension(s): .json</t>
      <t>Macintosh file type code: TEXT</t>
      <t>Object Identifiers: n/a</t>
    </list></t>
  <t>General Comments:</t>
  <t>Person to contact for further information:
  <list style="numbers">
      <t>Name: Irakli Nadareishvili</t>
      <t>Email: irakli@gmail.com</t>
    </list></t>
  <t>Intended usage: Common</t>
  <t>Author/Change controller: Irakli Nadareishvili</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses SHOULD be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service. Any method of cache lifetime negotiation provided by HTTP spec is
acceptable (e.g. ETags are just fine).</t>
  <t>Custom link relation types, as well as the URIs for variables, SHOULD lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIABRg11wAA+1c63LbyJX+j6fo4vwY2yEpSpZ84V5qFduTUTK2Zi1NstlU
KmkCTREjEOCiAdGMy6k8yO7L5Un2+87pBkBJ9jiX3cpe5seYBBvdp8/lO5c+
rclkkjR5U7i5+drZolmZFyuXXpu3zm+q0jvzVVWvbWOWVW2+vrz81px+e+YT
u1jU7maeZFVa2jXezWq7bCZ5aTNbu3xiN/lkJdNNUk43mR0nmW0w8Gh2+DxJ
8fGqqndzk5fLKknyTT03Td365mg2ez47SjCJnZufuNLVtki2VX19VVftZp5c
ux2+ZXNzVjauLl0zecmVk8Q3tsx+Y4uqxCI755NNPje/aqp0bPC/vMxc2YyN
r+qmdkuPT7t1+NDUeYqf0mq9seHDGoPxU14Weel+nSS2bVZVPU/MJDH4Ly89
CJiaN7pbv7rJi1x+UWac1fa6yO/5GWs518zN4eGxOQGrT29c2Tr5Kc0bsOON
25pfYrf6qGrLhkz6rswbl5mLBmzzplqa07UD0VZGubXNCzBS1vynK36bYgvy
W1uDCaum2cwPDrbb7XRZO79aFG298DImKUW4+Y3D3szbr14cHR4+Dx8fP3/2
hB+/wOeTo6Mn4fGzo2fPwsenR4+Pu6cn8b0nJ09nc4gUgt2fG8Nnccyzx4NJ
DuOKjx9jkmQymRi7AKsgjSS5XOXeQM1aysRs6mpTeTDBGu/qmzx1RtXMiJqZ
Omrt8h6tnercZdW437zh/5rqN2+dzVztk+TRI1BgXr08uzx/OzebwlnMUrt1
deNMQxq8S5u8Ks3CYVJnNu2igAj46NEjkulM7n0L0orc68LymhiGSS1fxNO2
zAzo+nsKxUMqV3mzahcUxkE0noN6mQbjkU0d6Lz/ONVV1hWmr11KdujkWGU4
ZZxnGubOqzszcq63OkW6suUVGYo9kXL3p9NHg8kbf7C2eL3m3BfOGVv4Cixw
SuSX3qRtXXNFWGrTehiR/Hr26vIrA2iwlPe1q8dYPumWH/wwzV2znFb11QG0
4eAH8EZ2SGGv8ywrXJJ8QcCoq6wVISonb0CvWdvvqxq2R7NaV9CFUnQFVOc3
eXklpAFBzNYtDBAGYxZ5gd1tNlH83rTeJaJl798HPf/wwVjP/eU1dRYIVBVT
w0WDunKqdtPka8eFMRDaJsiaOfBwDdgx9gambLFaoI7c2lsWD9beFTfOT7E7
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

-->

</rfc>

