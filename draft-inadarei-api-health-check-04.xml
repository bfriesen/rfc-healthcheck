<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-04" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States of America</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2019"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications use
HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for caching, failover or circuit-breaking, are
essential to the ability of providing highly-available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. However, there is currently no standard
for the health check output response, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>Health Check Response Format for HTTP APIs uses the JSON format described in
<xref target="RFC8259"/> and has the media type “application/health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<section anchor="status" title="status">

<t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:</t>

<t><list style="symbols">
  <t>“pass”: healthy (acceptable aliases: “ok” to support Node’s Terminus and
“up” for Java’s SpringBoot),</t>
  <t>“fail”: unhealthy (acceptable aliases: “error” to support Node’s Terminus and
“down” for Java’s SpringBoot), and</t>
  <t>“warn”: healthy, with some concerns.</t>
</list></t>

<t>The value of the status field is case-insensitive and is tightly related with
  the HTTP response code returned by the health endpoint. For “pass” status,
  HTTP response code in the 2xx-3xx range MUST be used. For “fail” status,
  HTTP response code in the 4xx-5xx range MUST be used. In case of the “warn”
  status, endpoints MUST return HTTP status in the 2xx-3xx range, and
  additional information SHOULD be provided, utilizing optional fields of the
  response.</t>

<t>A health endpoint is only meaningful in the context of the component it
  indicates the health of. It has no other meaning or purpose. As such, its
  health is a conduit to the health of the component. Clients SHOULD assume that
  the HTTP response code returned by the health endpoint is applicable to the
  entire component (e.g. a larger API or a microservice). This is compatible
  with the behavior that current infrastructural tooling expects:
  load-balancers, service discoveries and others, utilizing health-checks.</t>

</section>
<section anchor="version" title="version">

<t>version: (optional) public version of the service.</t>

</section>
<section anchor="releaseid" title="releaseId">

<t>releaseId: (optional) in well-designed APIs, backwards-compatible changes in
  the service should not update a version number. APIs usually change their
  version number as infrequently as possible, to preserve stable interface.
  However, implementation of an API may change much more frequently, which leads
  to the importance of having separate “release number” or “releaseId” that is
  different from the public version of the API.</t>

</section>
<section anchor="notes" title="notes">

<t>notes: (optional) array of notes relevant to current state of health</t>

</section>
<section anchor="output" title="output">

<t>output: (optional) raw error output, in case of “fail” or “warn” states. This
  field SHOULD be omitted for “pass” state.</t>

</section>
<section anchor="checks" title="checks">

<t>checks (optional) is an object that provides detailed health statuses of
additional downstream systems and endpoints which can affect the overall health
of the main API. Please refer to the “The Checks Object” section for more
information.</t>

</section>
<section anchor="links" title="links">

<t>links (optional) is an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC8288"/> a link
relationship SHOULD either be a common/registered one or be indicated as a URI,
to avoid name clashes.  If a “self” link is provided, it MAY be used by clients
to check health via HTTP response code, as mentioned above.</t>

</section>
<section anchor="serviceid" title="serviceId">

<t>serviceId (optional) is a unique identifier of the service, in the application
scope.</t>

</section>
<section anchor="description" title="description">

<t>description (optional) is a human-friendly description of the service.</t>

</section>
</section>
<section anchor="the-checks-object" title="The Checks Object">

<t>The “checks” object MAY have a number of unique keys, one for each logical
downstream dependency or sub-component. Since each sub-component may be
backed by several nodes with varying health statuses, these keys point to arrays
of objects. In case of a single-node sub-component (or if presence of nodes is
not relevant), a single-element array SHOULD be used as the value, for
consistency.</t>

<t>The key identifying an element in the object SHOULD be a unique string within
the details section. It MAY have two parts: “{componentName}:{measurementName}”,
in which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not
contain a colon, in the name, since colon is used as a separator.</t>
  <t>measurementName: (optional) name of the measurement type (a data point type)
that the status is reported for. MUST not contain a colon, in the name, since
colon is used as a separator. The observation’s name can be one of:
  <list style="symbols">
      <t>A pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Open API Spec document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value side of the equation, each “component details” object in the array
MAY have one of the following object keys:</t>

<section anchor="componentid" title="componentId">

<t>componentId: (optional) is a unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>

</section>
<section anchor="componenttype" title="componentType">

<t>componentType: (optional) SHOULD be present if componentName is present. It’s
a type of the component and could be one of:</t>

<t><list style="symbols">
  <t>Pre-defined value from this spec. Pre-defined values include:
  <list style="symbols">
      <t>component</t>
      <t>datastore</t>
      <t>system</t>
    </list></t>
  <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="observedvalue" title="observedValue">

<t>observedValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>

</section>
<section anchor="observedunit" title="observedUnit">

<t>observedUnit (optional) SHOULD be present if observedValue is present. Clarifies
the unit of measurement in which observedUnit is reported, e.g. for a time-based
value it is important to know whether the time is reported in seconds, minutes,
hours or something else. To make sure unit is denoted by a well-understood name
or an abbreviation, it SHOULD be one of:</t>

<t><list style="symbols">
  <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="status-1" title="status">

<t>status (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="affectedendpoints" title="affectedEndpoints">

<t>A typical API has many URI endpoints. Most of the time we are interested in
the overall health of the API, without diving into details. That said, sometimes
operational and resilience middleware needs to know more details about the health
of the API (which is why “checks” property provides details). In such cases,
we often need to indicate which particular endpoints are affected by a particular
check’s troubles vs. other endpoints that may be fine. The <spanx style="verb">affectedEndpoints</spanx>
property is a JSON array containing URI Templates as defined by <xref target="RFC6570"/>.</t>

</section>
<section anchor="time" title="time">

<t>time (optional) is the date-time, in ISO8601 format, at which the reading of the
observedValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>

</section>
<section anchor="output-1" title="output">

<t>output (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="links-1" title="links">

<t>links (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/health+json

  HTTP/1.1 200 OK
  Content-Type: application/health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseId": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceId": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "checks": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "observedValue": 250,
        "observedUnit": "ms",
        "status": "pass",
        "affectedEndpoints" : [
          "/users/{userId}",
          "/customers/{customerId}/status",
          "/shopping/{anything}"
        ],
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "type": "datastore",
        "observedValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "observedValue": 1209600.245,
        "observedUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 85,
        "observedUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "observedValue": 8.5,
        "observedUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "observedValue": 5500,
        "observedUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases, the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type for health check response is application/health+json.</t>

<t><list style="symbols">
  <t>Media type name: application</t>
  <t>Media subtype name: health+json</t>
  <t>Required parameters: n/a</t>
  <t>Optional parameters: n/a</t>
  <t>Encoding considerations: binary</t>
  <t>Security considerations: Health+JSON shares security issues common to all JSON
  content types. See RFC 8259 Section #12 for additional information.  <vspace blankLines='1'/>
Health+JSON allows utilization of Uniform Resource Identifiers (URIs) and as such
  shares security issues common to URI usage. See RFC 3986 Section #7
  for additional information.  <vspace blankLines='1'/>
Since health+json can carry wide variety of data, some data may require privacy
  or integrity services. This specification does not prescribe any specific
  solution and assumes that concrete implementations will utilize common, trusted
  approaches such as TLS/HTTPS, OAuth2 etc.</t>
  <t>Interoperability considerations: None</t>
  <t>Published specification: this RFC draft</t>
  <t>Applications which use this media: Various</t>
  <t>Fragment identifier considerations: Health+JSON follows RFC6901 for implementing
URI Fragment Identification standard to JSON content types.</t>
  <t>Restrictions on usage: None</t>
  <t>Additional information:
  <list style="numbers">
      <t>Deprecated alias names for this type: n/a</t>
      <t>Magic number(s): n/a</t>
      <t>File extension(s): .json</t>
      <t>Macintosh file type code: TEXT</t>
      <t>Object Identifiers: n/a</t>
    </list></t>
  <t>General Comments:</t>
  <t>Person to contact for further information:
  <list style="numbers">
      <t>Name: Irakli Nadareishvili</t>
      <t>Email: irakli@gmail.com</t>
    </list></t>
  <t>Intended usage: Common</t>
  <t>Author/Change controller: Irakli Nadareishvili</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses SHOULD be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service. Any method of cache lifetime negotiation provided by HTTP spec is
acceptable (e.g. ETags are just fine).</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>



<reference  anchor="RFC6570" target='https://www.rfc-editor.org/info/rfc6570'>
<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'><organization /></author>
<date year='2012' month='March' />
<abstract><t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6570'/>
<seriesInfo name='DOI' value='10.17487/RFC6570'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
CvZafMDjpllhFs4K6GUG4UiED/f1SXemwmfj6Xiqz+UIBM9+ORj8Sh4ESWCU
DmgrtHy0mDxzh9PpYrS/ODgYHUyeT0fH88PD0fHh0YvF8X58HB+E9XplVL7Y
YTU7sH/bJII6NuDizHzQ439gn4eJlHbWL5KQSPndhHE6tstduU6ySJ7Hi+l8
tD9/7kYHB/vTkZ3Mj0aL54sXL45f2OeTRDd+93XKRiZoMqn+qB3wwKjp4eSB
XxmWcoqV77/7gHjCL/fQdGC6LcqIvRoz+70P/Oc8+dh7mT/GiGHgxzig+YhB
e2HB3bF+WazXML29D3C9Erp+HLQDftUjqlJOD6aT/aPRZH+0/+Jq8mz27Pns
4OjfdljSqUl4+DHqzdWTYa+q9RcRYfXHSO7F4YOikXO5/x4Xek8FClt1bhbj
MQstQZv47TodN9DCnuxkzorFXrP5gAydjD4+yGWtD36BrY1qa1Hgc9zZn06O
ATbj6cHhZ/T7K9X7szx8WGfW9axXKP0qbXm+SA72n7vJ6Oh4Ohkd7E8Wo+P4
BfzFwYvjyWSyeDGdvuhTRS5zp5/DgC8z6uhz/IGnZ0P+w1z6M2haw7vhX4o5
0/8DzNlRrJVb8Y7S/xLdGn+Of9+mP/l/q1iHh5PP+d3Xn2LNH4VMX6NWUWDS
HaQfSC74GZCX3/ckAgrr9Ee+lws+LturlrzdVWQJpg4L3xvXm6o/npRFHyWu
Rbh76eJarsSc8qA0CZkugvWmy6zJKt17mGXKg3vmjpuly0MprHdO3O/EMK8t
Yti0qH2E4L4ofag41j7csep3RzCML0oEebwJJjPaqrJs1ZJsV/o1bXMAHe3c
segyUiajDbWsa2LjPJAIrQ7s18xDI71B8NxUANmI6rUHBE8lBWD56x4/rnZ7
iu9eMegaG7pWurvxuzTtv+7m0AuE/eaE5mekM70R/RTgqXkb2oeZsePnCtHd
zOR7Fj9dNJ2Q9386y+Mi0Rs9/X3NzDzNbbnFiFYT7o7Qdu0fS+Lul5C+nHbr
2HANLpQd2QyQZZLii1I2jdXcC0TJm2K8eMdubS4non+0P9Wy7IOtn9K6aXZI
kNslvn9cypzhXbhV8bapDJ63p1FIOVkJ1FZtq/2XMusXN8OqRM1rMh3t7AHq
aH8h83yRfO3F6IlRagYwpHJ77x4TY1StPukROLU6dIyz9ndr421zxsK617VQ
HnKl0DDWHrUpd1h3kBoo019pnJeaZHseJ6wIF60Cj3p1DvZJs9ff3L2bs0kh
apWCCzwb6r1epz3aUOyyYL7q2wLx1XeXe0x+L4fm4gT2OTWuitkpcH73atBd
JXwDR4Bx34eW92R3jzOFFApILgti5En/ipXWfFroETuemZ+B68Snp+ab0l7r
QUJ3hvk5MwhNF3K99VjLSx1/YGURNaedtFHFII+uMF9oNWzXTMTE9aKy0I43
RAdbHpw8qGrqBvbH5iXLHAH02Fmv1enuhkolJQaiAl+YEqiv0zic7zz2T7rf
no3NN7z/yGa3nMUC+XUcShHGHPDdmBVUvzQLjhTQYmfXzFyd/euVjDochzao
vkk2sBRufQNt9R72jDLG72p/UiCMtcqzqEupQD605Tefv4mNPZ594uK0al7O
Un1g8qloMtks98D3TrWdNfiHzJWfWIiXXWLWfjOXXOt9JjoNK+2BhTGv0xtn
TlZ1nngHQzkr0xvz8zRjE9xPa96FMj+BrRR8TBt8Sx2BgTX/spdJenphS9fX
vDzV9Ccu4PLYzDU2J7no1Gtb3vBiERVxaeWimZkjPJKTA5lIr7jTG0CBvXHW
p9lWXN8pb/c1N9kuiSr4fOcCD/b1c7r/cEUUSPagQzbtNc7m8qQUnUHvxkh5
Qavlzq3Z97RK80R6mNo+/dah9pvU59i5yYqg3jyfkcBd75HIeTqll21HbOmB
8Nnc2KJPKDENMEtsCQZppSi2dNnaMPseNZ3kDQx1LY20y1cPOXzfFIDXoreW
eBjuXoTAbmi2RR3CH5tg9gpxVNTvV6Z/kvOlPbzVPQZ/9T7DbluqdGrbBSSZ
9O5OmvbWYQhpOKiDih0Z7bioT+6r32cWWtitkT8rkHP+LF04LcLzMEuC3c+U
JwdPjNwRp0vp3Y7srkAviw0kq/f56OKUX1JVl9vPumtpUqWEsm3bWA6VquJl
o7V1njYm/fLlxeVIK/zRTls9bYUXP2AGcmSoq7Qbyt11Uelx685Rnl5jYQOP
dGX37jDped7Zlb323eEhTzCekL+nUnvblaKivXTA8lC2KXjLmSUtliEBp+Y1
B70DwK558ICKEw4Gu+AZG5Ge2lwvUHhphJYYtl71THj3yl0vyl/xHpM4yAeD
Wrm1Y/thysZuuQj/tEJ3HvLpgJh5ELFk0NL+d6F1umnVjx5+ubnxGLQQrzbx
vfYszN22CMeyrWZGrSDDQduDUwvrYbMiVf7JAr3NLn8YIGsvUh/IodOJ10Pn
OuPfDAk8K2ryjG6q0dFPMOCxLhT15nzS0+ZWewFH4Q9O8Ch6q+eaVkPNcE64
oSZEcha3YTI2d6a9Tgg6v4OT4XP2yyqZQE/50yKu1MurB5MD8xhSAz7BFT1h
dGHbzm4Zi6hFeVzMeToXBZOHcq23X2Aot+Slw0GP/AWy6/WoKkaJ3E74Lynb
qV2BRgAA

-->

</rfc>

