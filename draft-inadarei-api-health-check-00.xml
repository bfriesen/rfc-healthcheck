<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "./Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-healthcheck-00" category="info">

  <front>
    <title>Healtch Check Response for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a “health check response” format for API HTTP clients.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-healthcheck/">https://datatracker.ietf.org/doc/draft-inadarei-api-healthcheck/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Vast majority of modern APIs, that drive data to web and mobile applications use
HTTP <xref target="RFC7230"/> as a transport protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for failover or circuit-breaking, are essential
for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific rformats creates significant
challenges, disallowing any meaningful interoprerability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC7159"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="api-health-response" title="API Health Response">

<t>An API Health Response Format (or, interchangeably, “health check response”)
uses the format described in <xref target="RFC7159"/> and has the media type
“application/vnd.health+json”.</t>

<t><spanx style="strong">Note: this media type is not final, and will change before final publication.</spanx></t>

<t>Its content consists of a single mandatory root field and several optional
fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 4xx - 5xx range MUST be
used.  <vspace blankLines='1'/>
In case of “warn” status, additional information SHOULD be provided, utilizing
optional fields of the response.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
  <t>memory: (optional) array of sizes for the  currently utilized resident memory
(in kilobytes) on each of the logical nodes backing the service. Logical node
can be a physical server, VM, a container or any other logical unit that makes
sense for service publisher.</t>
  <t>cpu: (optional) array of cpu utiliation percentage on each of the logical
nodes backing the service. Logical node can be a physical server, VM, a
container or any other logical unit that makes sense for service publisher.</t>
  <t>uptime: (optional) current uptime in seconds since the last restart</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional information
regarding the various sub-components of the service.</t>
  <t>links: (optional) an array of objects containing link relations and URIs 
<xref target="RFC3986"/> for external links that MAY contain more information about the 
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.</t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "serviceID": "service:authz",
    "description": "health of authz service",
    "status": "pass",
    "memory": [4096, 1024, 3456],
    "cpu": [20, 40, 50],
    "uptime": "1209600",
    "notes": [""],
    "output": "",
    "details": [
      {
        "id": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "name": "sub-component-X",
        "status": "pass",
        "value": "12313",
        "output": ""
      },
      {
        "id": "3c1f048c-a4be-4aa2-83e6-2629073d19dc",
        "name": "sub-component-Y",
        "status": "warn",
        "value": "0920394",
        "output": "Close to capacity"
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ]
  }
]]></artwork></figure>

</section>
<section anchor="another-subtitle" title="Another subtitle">

<t>Lorem Ipsum</t>

</section>
<section anchor="final-subtitle" title="Final subtitle">

<t>Lorem ipsum</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json will be submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5226" target='https://www.rfc-editor.org/info/rfc5226'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'><organization /></author>
<date year='2008' month='May' />
<abstract><t>Many protocols make use of identifiers consisting of constants and other well-known values.  Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec).  To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority.  For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).</t><t>In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made.  If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role.  This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.</t><t>This document obsoletes RFC 2434.  This document specifies an Internet Best  Current Practices for the Internet Community, and requests discussion and  suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='RFC' value='5226'/>
<seriesInfo name='DOI' value='10.17487/RFC5226'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7159" target='https://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>
<section anchor="frequently-asked-questions" title="Frequently Asked Questions">

<section anchor="why-not-use-insert-other-health-check-format" title="Why not use (insert other health check format)?">

<t>There are a fair number of existing health check formats. However, these formats
have generally been optimised for particular use-cases, and less capable of
fitting into general scenarios, optimized for interoperability.</t>

</section>
<section anchor="why-doesnt-the-format-allow-references-or-inheritance" title="Why doesn’t the format allow references or inheritance?">

<t>Implementing them would add considerable complexity and the associated
potential for errors (both in the specification and by its users). For the sake
of interoperability and ease of implementation this specification doesn’t
attempt to create the most powerful format possible.</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

