<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-healthcheck/">https://datatracker.ietf.org/doc/draft-inadarei-api-healthcheck/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs, that drive data to web and mobile applications
use HTTP <xref target="RFC7230"/> as a transport protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific rformats creates significant
challenges, disallowing any meaningful interoprerability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC7159"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="api-health-response" title="API Health Response">

<t>An API Health Response Format (or, interchangeably, “health check response”)
uses the format described in <xref target="RFC7159"/> and has the media type
“application/vnd.health+json”.</t>

<t><spanx style="strong">Note: this media type is not final, and will change before final publication.</spanx></t>

<t>Its content consists of a single mandatory root field and several optional
fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 4xx - 5xx range MUST be
used.  <vspace blankLines='1'/>
In case of “warn” status, additional information SHOULD be provided, utilizing
optional fields of the response.</t>
  <t>version: (optional) public version of the service.</t>
  <t>release_id: (optional) for APIs backwards-compatible changes in the service
should not update version number. In general, APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of API may change much more frequently, which leads to
release number or release_id that is different from the public version of the
API.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
  <t>memory: (optional) array of sizes for the  currently utilized resident memory
(in kilobytes) on each of the logical nodes backing the service. Logical node
can be a physical server, VM, a container or any other logical unit that makes
sense for service publisher.</t>
  <t>cpu: (optional) array of cpu utiliation percentage on each of the logical
nodes backing the service. Logical node can be a physical server, VM, a
container or any other logical unit that makes sense for service publisher.</t>
  <t>uptime: (optional) current uptime in seconds since the last restart</t>
  <t>connections: (optional) current number of active connections</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional information
regarding the various sub-components of the service.</t>
  <t>links: (optional) an array of objects containing link relations and URIs 
<xref target="RFC3986"/> for external links that MAY contain more information about the 
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.</t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "serviceID": "service:authz",
    "description": "health of authz service",
    "status": "pass",
    "version" : "1",
    "release_id" : "1.2.2",
    "memory": [4096, 1024, 3456],
    "cpu": [20, 40, 50],
    "uptime": "1209600",
    "connections" : 25,
    "notes": [""],
    "output": "",
    "details": [
      {
        "id": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "name": "sub-component-X",
        "value": "12313",
        "status": "pass",
        "output": ""
      },
      {
        "id": "3c1f048c-a4be-4aa2-83e6-2629073d19dc",
        "name": "Cassandra test query duration in ms",
        "value": "250",
        "status": "warn",
        "output": "Response time over target of less than 100ms"
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ]
  }
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json is being submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7159" target='https://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </back>

<!-- ##markdown-source:
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
/wEEseAPMSQAAA==

-->

</rfc>

