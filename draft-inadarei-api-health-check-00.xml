<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications
use HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific rformats creates significant
challenges, disallowing any meaningful interoprerability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>An API Health Response Format (or, interchangeably, “health check response”)
uses the format described in JSON <xref target="RFC8259"/> and has the media type
“application/vnd.health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 5xx range MUST be
used. In case of the “warn” status, additional information SHOULD be provided,
utilizing optional fields of the response.</t>
  <t>version: (optional) public version of the service.</t>
  <t>releaseID: (optional) in well-designed APIs, backwards-compatible changes in
the service should not update a version number. APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of an API may change much more frequently, which leads
to the importance of having separate “release number” or “releaseID” that is
different from the public version of the API.</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional
information regarding the various sub-components of the service.  A details
object SHOULD be a health check response object.</t>
  <t>links: (optional) an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.  If a “self” link is provided, it MAY be used by clients to
check health via HTTP response code, as mentioned above.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
  <t>componentId: (optional) unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentId MAY appear in the details, if they are from different nodes.</t>
  <t>componentName: (optional) human-readable name for the component.</t>
  <t>componentType: (optional) SHOULD be present if componentName is present. Type
of the component. Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>component</t>
          <t>datastore</t>
          <t>system</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricName: (optional) Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>
  <t>metricUnit: (optional) SHOULD be present if metricValue is present. Could be
one of:
  <list style="symbols">
      <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "status": "pass",
    "version" : "1",
    "releaseID" : "1.2.2",
    "notes": [""],
    "output": "",
    "details": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentName": "Cassandra",
        "componentType" : "datastore",
        "metricName" : "responseTime",
        "metricValue": 250,
        "metricUnit" : "ms",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentName": "Cassandra",
        "type" : "datastore",
        "metricName" : "connections",
        "metricValue": 75,
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": "",
        "links": [
          {
            "rel": "self",
            "uri": "http://api.example.com/dbnode/dfd6cf2b/health"
          }
        ]
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "cpu",
        "componentType" : "system",
        "metricName" : "utilization",
        "metricValue": 85,
        "metricUnit" : "percent",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentType" : "system",
        "metricName" : "uptime",
        "metricValue": 1209600.245,
        "metricUnit" : "s",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "cpu",
        "componentType" : "system",
        "metricName" : "utilization",
        "metricValue": 85,
        "metricUnit" : "percent",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "memory",
        "componentType" : "system",
        "node" : 1,
        "metricName" : "utilization",
        "metricValue": 8.5,
        "metricUnit" : "GiB",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "memory",
        "node" : 2,
        "componentType" : "system",
        "metricName" : "utilization",
        "metricValue": 5500,
        "metricUnit" : "MiB",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ],
    "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
    "description": "health of authz service"
  }
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json is being submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </back>

<!-- ##markdown-source:
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
QIjcdgDzI/lyguow0Ymg/4bz4uieV7KkbDXCn7kBMwKupLeUzvUmwSQ2ff+S
QjteNlV8zXDmT4i3VWe8TzicgVOAuDLkVGTcglQcaHu88bSwF7DCEa2NwhTT
YpI4/vQJy+zjpyVMCDIE0IMHw8R8wJvw/EXJPE7rcIcKIVoEKsihMuliQrbL
Hjab5zporusjgmynKgYY9n9IXEoflT5TdyQeWWNPDmBQCgX9x9EvQn0RP8Vp
Qf8DTEJgoRrl4tXONGwyOCgK0SoPIWGKFBrbyV3KBW3NUS2m/pqi0w664LsB
YIAJOSoV6EB6ZMRHzYF3q41rEO43gZLPd0Frdyx5CUiMoO1zKPwNJ+mIByrD
IThFKzOqiS+2/kLSNoV469MnsZsbsPV5P7KQ7fqLJpsjx4Kr2q4GMM4ReJFP
yZyq5BCxQA5Fv+RIXsAnsHN3aiktbbcXhBt20CPT6rUC7/lIqIncNi0p4PKZ
9MOaA6ukNSo+3Y7GpLWSMxL+xGpdSU5zdiomzycbGMj4LHOHjpVroawFp/4j
edEWz8E4aBtbVCtOcXkb3mNtsWxQ0NU+vkWL5Rm0BVQoIPbZJqrtPsz0e5TK
rkU+NL7N8rdWxBnH1o6smlEmFwI65fYGZozshxFrKk6oPrMCOLrIDaj5dTub
kI/l9zyQtoJAfPfzGyHXLzXlsTyBVNRJUD/eXNDqHGaoUYIwQ1JTn6gTBbvn
NTxiEGojMQ/TrgDklBImKgBE5DtsV1U5pyoD8R6GgEI0JZoM2JDKhNyfGjIU
5T5jc66XoBnkEgoOFg8V7oh4ED0V/gg7SFQ5jHBq6ONP7pMm7JJtVa6MJqdP
LS3kuRIBBigSFxQMeyhGi55fnHKh6A+F9lsP7lpMN22GXBvQ8uoJe14hKH/p
vPvExcLnR8TSFDUmu84Ahc+8IJJsmL/Q1N5DmeKL3g5y+jEYdAI/GHEZsnoP
ccoimNwO3XmDSJ8WqDurHLDuDHvAQbe4vch/njlJxZ1rHRIyi1B7EVtdI9hD
LaKob5mFMqY1hsumrPWyVC1uOQrH9JzkvGWI9YHNK2mjKIIhQTSFT3wl+1E4
ta2Pq6jO3NnbFbc2vxARVdfsyxknMcdoZ+2QuEUKtkOiG1IVNQuIpZ0VPbz4
G1wYpXAiKmC7BlJqimLkzQjVBXUZX4r3VrXZO6dA0XFTiw8yH3w5wsW6e8Kd
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
bZZpbdKcLyT8HXcRKSCrMgAA

-->

</rfc>

