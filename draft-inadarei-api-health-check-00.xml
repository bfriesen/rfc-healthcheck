<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications
use HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>The API Health Response Format (or, interchangeably, “health check response
format”) uses the JSON format described in <xref target="RFC8259"/> and has the media type
“application/vnd.health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
The value of the status field is tightly related with the HTTP response code
returned by the health endpoint. For “pass” and “warn” statuses HTTP response
code in the 2xx range MUST be used. For “fail” status HTTP response code
in the 4xx range MUST be used. In case of the “warn” status, additional
information SHOULD be provided, utilizing optional fields of the response.  <vspace blankLines='1'/>
A health endpoint is only meaningful in the context of the component it
indicates the health of. It has no other meaning or purpose. As such, its
health is a conduit to the health of the component. Clients SHOULD assume that
the HTTP response code returned by the health endpoint is applicable to the
entire component (e.g. a larger API or a microservice). This is compatible
with the behavior that current infrastructural tooling expects:
load-balancers, service discoveries and others utilizing health-checks.</t>
  <t>version: (optional) public version of the service.</t>
  <t>releaseID: (optional) in well-designed APIs, backwards-compatible changes in
the service should not update a version number. APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of an API may change much more frequently, which leads
to the importance of having separate “release number” or “releaseID” that is
different from the public version of the API.</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an object representing status of sub-components of the
service in question. Please refer to the “The Details Object” section for more
information.</t>
  <t>links: (optional) an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.  If a “self” link is provided, it MAY be used by clients to
check health via HTTP response code, as mentioned above.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
</list></t>

</section>
<section anchor="the-details-object" title="The Details Object">

<t>The “details” object MAY have a number of unique keyes, one for each logical
sub-components. Since each sub-component may be backed by several nodes with
varying health statuses, the key points to an array of objects. In case of a
single-node sub-component (or if presence of nodes is not relevant), a
single-element array should be used as the value, for consistency.</t>

<t>The key identifying an element in the object should be a unique string within
the details section. It MAY have two parts: “{componentName}:{metricName}”, in
which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not 
contain a colon, in the name, since colon is used as a separator.</t>
  <t>metricName: (optional) name of the metrics that the status is reported for.
MUST not contain a colon, in the name, since colon is used as a separator and
can be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value eside of the equation, each “component details” object in the array
MAY have one of the following object keys:</t>

<t><list style="symbols">
  <t>componentId: (optional) unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>
  <t>componentType: (optional) SHOULD be present if componentName is present. Type
of the component. Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>component</t>
          <t>datastore</t>
          <t>system</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>
  <t>metricUnit: (optional) SHOULD be present if metricValue is present. Could be
one of:
  <list style="symbols">
      <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>time: the date-time, in ISO8601 format, at which the reading of the
metricValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>
  <t>output: (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component.</t>
  <t>links: (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component.</t>
</list></t>

</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseID": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "details": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "metricValue": 250,
        "metricUnit": "ms",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "type": "datastore",
        "metricValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "metricValue": 1209600.245,
        "metricUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "metricValue": 85,
        "metricUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "metricValue": 85,
        "metricUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "metricValue": 8.5,
        "metricUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "metricValue": 5500,
        "metricUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json is being submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAPOrbloAA+1b7XIbOXb930+B4vxY22FTFC3JEpNsRWt7xtqMLceSs7XZ
mpoCu0GxR80G0+gWzXFpah8kebl9kpxzATSbkmxvamdStZv1D4vsBi4u7j33
E2CapklTNKWZqldGl81CPV+Y7Fq9M25lK2fU17Ze6kbNba1eXV6+Vadvz1yi
Z7Pa3EyT3GaVXmJuXut5kxaVznVtilSvinQh5NKM5NLxOMl1g4GT8f5xkuHj
la03U1VUc5skxaqeqqZuXTMZj0/GkwRE9FR9YypT6zJZ2/r6qrbtappcmw2+
5VN1VjWmrkyTvuDKSeIaXeXf69JWWGRjXLIqpuoPjc2GCv8VVW6qZqicrZva
zB0+bZbhQ1MXGV5ldrnS4cMSg/GqqMqiMt8liW6bha2niUoThX9F5cDASL3x
u3WLm6Is5I0Xxlmtr8vigddYy5hmqvb3D9QhRH16Y6rWyKusaCCON2atfo/d
+ke2rRoK6X1VNCZXFw3E5uSVWeqihPRkoX+54rcR+JZ3bY2dL5pmNd3bW6/X
o3lt3GJWtvXMyZikEo0WNwYbUu++fj7Z3z8JH5+eHB/x41f4fDiZHIXHhyfH
x+Hjs8nTg/DxeHKIeQlVuEsQY8bh49Hx097M/bjM06ecmaap0jMIBXJPkstF
4RQA1VL6alXblXXGKa2cqW+KzCgPKCWAUnXE5/wBfI487co25vs3/K+x378z
Oje1S5InT8CBevni7PL83VStSqNBpTZLe2NUQx6cyZrCVmpmQNSoVTsrCyAW
j548IZtGFc61YK0snF9YpokJqExzIp62Va7A1z9REw6quCqaRTujBvaimezV
8yyYiWxqz9P99civsrQgX5uM4vDEsUqfZKQzCrQLe48iab3zJLKFrq4oUOyJ
nJv/PX80jaJxe0uN6TVpXxijdOksRGA8k79yKmvrmivCJpvWwVzk7dnLy68V
nICmvq9NPcTySbd878WoMM18ZOurPaBh7wueRXZIZS+LPC9NknxF11DbvBUl
eknegF+11D/YGlam7ByiBRYqwQq4Lm6K6kpYg69QazNT8CUYMytK7G61iup3
SQuoCMo+fgw4v71V2nF/RU3MwtfYcqS4aIArSbWrplgaLoyBziR+XQMZLuFg
lL6B/WqsFrijtPrL8sHSmfLGuBF2p/KCTmvWQoWJ20AVS6dmbVE2al1wRVW1
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
3kL4snn0ONsxjmgDXKpnBT8nLL0w+6Aceklua5lOwpGGr62ePpVO9t8R/H8R
y54opidT76gh3pRfJfM6uzg/Phrvd2dmEJXPYn0fU+fbBBar9pG21kzyMlvz
0Mw33nxHsJcOeicbUrUMsTKcvHlqkXyzWbEAYglmjat+RT0gtjCkcUypPLdy
om1q4bTyJz7Ao46n+CAYmp0SYh7omsRjCfNBszhgLIlKCm8au0r92fDAzx+w
F+lri6GatdsjrZ2g+nDz4RdcDuXoyw+aXTJ1LhOT5KeffsLkb15eqr1Q87Hu
3tsf7UtjzUEUxk+h9bIvLacaU/WZgxm2ryMVNRmP1fm/4slzf0yT+tj9uekY
S52nnFHbcorK9UOqr8w/Pz0ajz2lkEdPVVZanmB9xON4qDMN7SjifRBabHy4
759se3R8NpqMJv659Nbw7A+DwXfyIMgWo/yArsvAR/PxU3M4mczT/fnBQXow
PpqkJ7PDw/Tk8PjZ/GQ/O8kOwnq9/gAnbrs6vKr2Y0yk4lifB07VRzHWAYpC
B8DWetqvJ8ilvFdhnB+7zfy4UD7Pj7L5ZJbuz45MenCwP0n1eHaczo/mz56d
PNNH49zv/O50KkgIxBSlP6pnyhgzORzfe8fgw+lL15/3gG7Cm8ZvaMDrhul4
P91/djl+On16ND04/o/+uJ46wsNb+fvd8K6oenXWLyKp5s8X0LPDB2UgDda/
TAa9p+JDOszExdiGI9789UK9KkbRkHlxLJ8xq96LWw/GP+go3D4oY1+vfkGo
ET8+pf20bPYn4xMY9GhycPhJEP0cGHoYLat22iva/yycHM3zg/0jM06PTybj
9GB/PE9PsmfwsAfPTsbj8fzZZPKszxUlzH1+zsi+JKTjT8sGQY23BR+W0M+A
sCi34S8lmMlfuWB2ALU0S16T/qvA1OjTsvum+M3/U0AdHo4/Hcxef0osP3s0
S4KA7nj1gZwMfcahy/s9ySnCOv2RH+TGsSn3mgXvmNsyB+mw8L1xPVL98eQs
uZWMEYnkhclauaP7nI32PFy9c0kSj/t5L45FkfkAcyx4hMPCZ70wVWjy9s4Z
+idy6jWK4aywrUuQANvahVK5deHSd/+8jImurZEs8mq6UNRNo3lozqMIf89F
h4tIu3dC43mak3ORyCzrceybPbJw7lXl0iKT+34K2ahJZyCYJ7zd4/yxIJ5K
bs3K9p44vvpKvZb7TMSheienbP5lklyevzj/bCrMunxm5JCvnfXOW+seGRY3
iRTHvMF/e5v4S9Y85pELXxkr8tLkV/5OH89CtBxGWqVeF9dGnS7bKkfpP1Qv
6+Ja/a4oedT225b3AdVvkIlbPqYg3rE4L8vuL1hJ/H1q16KodNvz0DnkSQ5G
6rQSwb7W9TUv11FHCy2XLdUMhicVpxDyv9zgXrEVFPLaFeVG5PqcN1zjbc4L
5sv4fOeuGvb1O0Ir3IdG6figtrdXmeVIqzZSjWvwuya4qiuRy7Uxq4THs0WV
S1O1u4zTnUf2b6LMsHNV2gAY1vUSDOTUhSz7vkm5SXksASuSY9TY1ggFwQBU
Mk2MF7wbDuEuTLlSzOLSeF0k3izdHp2ygnz10DU8F6tngMOxrix+jHejgtMY
qo1tg2npHNSbQq5Ybduu7HBIX2IPs7aPIV9/ZWn3fNkfDM+hybx3f1h1h7zB
XjiouzS1q6M7x/Kf2NeSnRM5Bgu3V7SSn81UpF4WcyP396UFIm70M6Xk4LGS
n0PwUk/vfvD2tv/CrqFXf6OVjQIvLWlIyEX/7WG4on7KTXepBIBqskXEbFux
rVKxZ/PixflF6psjyc6NGm75OfZml7uClXuQTo6+2V+LPQBpP9GIeOOeSOP1
In9uyWss/kw99ni2vhImJofplb+4xLtFNDB8b5c9q9r9YVnPqS95DVBc8YO3
P+UXJLr/K4C13nAR/rRn2995+Iq/XCpD2KN5Dzre/zHcnYh3Z5KHJ8eLuAEa
mBr9ue+tzszGhg5bB5ekg0to7D1IWkQPM5KWBn8yo71i+cOUsrvffyD3a0+d
7x+2JX+dFmRmW8qMd3UicD4hgEd+oaRH83EPYh2kiib+4IldxY2/DKX9NZdH
vg23JhIS6VyuGXtnRnUXWMHnt/D7fD7kcaqwCYcmP2Iztb9TfTA+UI+gNbgM
RIfH/B2E7i51yNgaZiQytjMezCbBDgGu1eYLAuWWoKP4e5BCvGi7Shub5nKD
6H8AcjFraes4AAA=

-->

</rfc>

