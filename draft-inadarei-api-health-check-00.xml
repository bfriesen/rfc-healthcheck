<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications
use HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>The API Health Response Format (or, interchangeably, “health check response format”)
uses the JSON format described in <xref target="RFC8259"/> and has the media type
“application/vnd.health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 5xx range MUST be
used. In case of the “warn” status, additional information SHOULD be provided,
utilizing optional fields of the response.</t>
  <t>version: (optional) public version of the service.</t>
  <t>releaseID: (optional) in well-designed APIs, backwards-compatible changes in
the service should not update a version number. APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of an API may change much more frequently, which leads
to the importance of having separate “release number” or “releaseID” that is
different from the public version of the API.</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional
information regarding the various sub-components of the service.  A details
object SHOULD be a health check response object.</t>
  <t>links: (optional) an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.  If a “self” link is provided, it MAY be used by clients to
check health via HTTP response code, as mentioned above.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
  <t>componentId: (optional) unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentId MAY appear in the details, if they are from different nodes.</t>
  <t>componentName: (optional) human-readable name for the component.</t>
  <t>componentType: (optional) SHOULD be present if componentName is present. Type
of the component. Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>component</t>
          <t>datastore</t>
          <t>system</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricName: (optional) Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>
  <t>metricUnit: (optional) SHOULD be present if metricValue is present. Could be
one of:
  <list style="symbols">
      <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "status": "pass",
    "version" : "1",
    "releaseID" : "1.2.2",
    "notes": [""],
    "output": "",
    "details": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentName": "Cassandra",
        "componentType" : "datastore",
        "metricName" : "responseTime",
        "metricValue": 250,
        "metricUnit" : "ms",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentName": "Cassandra",
        "type" : "datastore",
        "metricName" : "connections",
        "metricValue": 75,
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": "",
        "links": [
          {
            "rel": "self",
            "uri": "http://api.example.com/dbnode/dfd6cf2b/health"
          }
        ]
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "cpu",
        "componentType" : "system",
        "metricName" : "utilization",
        "metricValue": 85,
        "metricUnit" : "percent",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentType" : "system",
        "metricName" : "uptime",
        "metricValue": 1209600.245,
        "metricUnit" : "s",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "cpu",
        "componentType" : "system",
        "metricName" : "utilization",
        "metricValue": 85,
        "metricUnit" : "percent",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "memory",
        "componentType" : "system",
        "node" : 1,
        "metricName" : "utilization",
        "metricValue": 8.5,
        "metricUnit" : "GiB",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "memory",
        "node" : 2,
        "componentType" : "system",
        "metricName" : "utilization",
        "metricValue": 5500,
        "metricUnit" : "MiB",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ],
    "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
    "description": "health of authz service"
  }
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json is being submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </back>

<!-- ##markdown-source:
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
/AN8nDqLsTIAAA==

-->

</rfc>

