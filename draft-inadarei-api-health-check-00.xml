<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications
use HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific rformats creates significant
challenges, disallowing any meaningful interoprerability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>An API Health Response Format (or, interchangeably, “health check response”)
uses the format described in JSON <xref target="RFC8259"/> and has the media type
“application/vnd.health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 4xx - 5xx range MUST be
used. In case of the “warn” status, additional information SHOULD be provided,
utilizing optional fields of the response.</t>
  <t>version: (optional) public version of the service.</t>
  <t>release_id: (optional) in well-designed APIs, backwards-compatible changes in
the service should not update a version number. APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of an API may change much more frequently, which leads
to the importance of having separate “release number” or “release_id” that is
different from the public version of the API.</t>
  <t>uptime: (optional) current uptime in seconds since the last restart</t>
  <t>connections: (optional) current number of active connections</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional
information regarding the various sub-components of the service.</t>
  <t>links: (optional) an array of objects containing link relations and URIs 
<xref target="RFC3986"/> for external links that MAY contain more information about the 
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "status": "pass",
    "version" : "1",
    "release_id" : "1.2.2",
    "uptime": "1209600.245",
    "connections" : 25,
    "notes": [""],
    "output": "",
    "details": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentName": "Cassandra",
        "componentType" : "datastore",
        "metricName" : "responseTime",
        "metricValue": 250,
        "metricUnit" : "milliseconds",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentName": "Cassandra",
        "type" : "datastore",
        "metricName" : "connections",
        "metricValue": 75,
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "cpu",
        "type" : "system",
        "metricName" : "utilization",
        "metricValue": 85,
        "metricUnit" : "percent",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "cpu",
        "type" : "system",
        "metricName" : "utilization",
        "metricValue": 85,
        "metricUnit" : "percent",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "memory",
        "type" : "system",
        "node" : 1,
        "metricName" : "utilization",
        "metricValue": 8.5,
        "metricUnit" : "gb",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "memory",
        "node" : 2,
        "type" : "system",
        "metricName" : "utilization",
        "metricValue": 5500,
        "metricUnit" : "mb",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ],
    "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
    "description": "health of authz service"
  }
]]></artwork></figure>

</section>
<section anchor="details-object" title="Details Object">

<t>Following fields MAY appear and rules SHOULD be used for the details objects of the reponse.</t>

<t><list style="symbols">
  <t>componentId: (required) unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentId MAY appear in the details, if they are from different nodes.</t>
  <t>status: (required) “pass”, “fail” or “warn”. Same semantic meaning as at  the
top level.</t>
  <t>componentName: (optional) human-readable name for the component.</t>
  <t>componentType: (optional) SHOULD be present if componentName is present. Type
of the component. Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>component</t>
          <t>datastore</t>
          <t>system</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricName: (optional) Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>
  <t>metricUnit: (optional) SHOULD be present if metricValue is present. Could be
one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>data size abbreviations: kb, mb, gb, tb, or pb that respectively stand
for: kilobyte, megabyte, gigabyte, terabyte and petabyte.</t>
          <t>time abbreviations: ns, ms, s, hr, min, d, yr that respectively stand for:
nanosecond, millisecond, second, hour, day, and year.</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json is being submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </back>

<!-- ##markdown-source:
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
oTMAAA==

-->

</rfc>

