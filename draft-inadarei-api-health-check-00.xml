<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "./Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Healtch Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a “health check response” format for API HTTP clients.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-healthcheck/">https://datatracker.ietf.org/doc/draft-inadarei-api-healthcheck/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Vast majority of modern APIs, that drive data to web and mobile applications use
HTTP <xref target="RFC7230"/> as a transport protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for failover or circuit-breaking, are essential
for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific rformats creates significant
challenges, disallowing any meaningful interoprerability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC7159"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="api-health-response" title="API Health Response">

<t>An API Health Response Format (or, interchangeably, “health check response”)
uses the format described in <xref target="RFC7159"/> and has the media type
“application/vnd.health+json”.</t>

<t><spanx style="strong">Note: this media type is not final, and will change before final publication.</spanx></t>

<t>Its content consists of a single mandatory root field and several optional
fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 4xx - 5xx range MUST be
used.  <vspace blankLines='1'/>
In case of “warn” status, additional information SHOULD be provided, utilizing
optional fields of the response.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
  <t>memory: (optional) array of sizes for the  currently utilized resident memory
(in kilobytes) on each of the logical nodes backing the service. Logical node
can be a physical server, VM, a container or any other logical unit that makes
sense for service publisher.</t>
  <t>cpu: (optional) array of cpu utiliation percentage on each of the logical
nodes backing the service. Logical node can be a physical server, VM, a
container or any other logical unit that makes sense for service publisher.</t>
  <t>uptime: (optional) current uptime in seconds since the last restart</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional information
regarding the various sub-components of the service.</t>
  <t>links: (optional) an array of objects containing link relations and URIs 
<xref target="RFC3986"/> for external links that MAY contain more information about the 
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.</t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "serviceID": "service:authz",
    "description": "health of authz service",
    "status": "pass",
    "memory": [4096, 1024, 3456],
    "cpu": [20, 40, 50],
    "uptime": "1209600",
    "notes": [""],
    "output": "",
    "details": [
      {
        "id": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "name": "sub-component-X",
        "status": "pass",
        "value": "12313",
        "output": ""
      },
      {
        "id": "3c1f048c-a4be-4aa2-83e6-2629073d19dc",
        "name": "sub-component-Y",
        "status": "warn",
        "value": "0920394",
        "output": "Close to capacity"
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ]
  }
]]></artwork></figure>

</section>
<section anchor="another-subtitle" title="Another subtitle">

<t>Lorem Ipsum</t>

</section>
<section anchor="final-subtitle" title="Final subtitle">

<t>Lorem ipsum</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json will be submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5226" target='https://www.rfc-editor.org/info/rfc5226'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'><organization /></author>
<date year='2008' month='May' />
<abstract><t>Many protocols make use of identifiers consisting of constants and other well-known values.  Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec).  To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority.  For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).</t><t>In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made.  If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role.  This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.</t><t>This document obsoletes RFC 2434.  This document specifies an Internet Best  Current Practices for the Internet Community, and requests discussion and  suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='RFC' value='5226'/>
<seriesInfo name='DOI' value='10.17487/RFC5226'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7159" target='https://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>
<section anchor="frequently-asked-questions" title="Frequently Asked Questions">

<section anchor="why-not-use-insert-other-health-check-format" title="Why not use (insert other health check format)?">

<t>There are a fair number of existing health check formats. However, these formats
have generally been optimised for particular use-cases, and less capable of
fitting into general scenarios, optimized for interoperability.</t>

</section>
<section anchor="why-doesnt-the-format-allow-references-or-inheritance" title="Why doesn’t the format allow references or inheritance?">

<t>Implementing them would add considerable complexity and the associated
potential for errors (both in the specification and by its users). For the sake
of interoperability and ease of implementation this specification doesn’t
attempt to create the most powerful format possible.</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAI1xXFoAA5Va/XPbuNH+HX8FRvdDnVSUZdlxbPX9cp2kcRvHd7bTezud
zg1IghLOJMECpBTlxve399kFKFGJc2lvcjFNAov93mcXSZJEtKYt9Vy+1aps
s6W8XOrsQd5q39jaa/nGukq1srBOvr2//15efH/lhUpTp1dzkdusVhU2504V
bWJqlSunTaIakyyJ3jLJiFwynYpctVg4mx6diQyPC+s2c2nqwgphGjeXret8
O5tOz6czASJqLv+ka+1UKdbWPSyc7Zq5eNAb/JbP5VXdalfrNnlFJwvhW1Xn
P6nS1jhko71ozFz+vbXZWOIvU+e6bsfSW9c6XXg8bar40DqT4VNmq0bFhwqL
8cnUpan1P4RQXbu0bi5kIiT+M7UHAxP5PkjrlytTGv4SlHHl1ENpnvic2a5u
SewPtWl1Lu9aKMLzJ+sWqjafVGtsPec3ulKmhIaY2P8t6LcJeONvnYN0y7Zt
5oeH6/V6Ujjtl2nZudTTmkMhajabWWkidvvmcnZ0dB4fj8/PTuPji9ls+3h+
dhYfXx696Ne+nB2fzGEgmGmfHj5M4+Pp2fHZ7u0RlidJIlUKzUKhQtwvjZfw
lI7UKhtnG+u1l0qOgotIdhHposeNZLFzOXhbcLusNGSUSSBe21b/9J7+au1P
t1rl2nkhnoMD+frV1f3N7Vw2pVZwX6cru9KyJR68zki9MtUgrWXTpaXJWOPP
iUstjfcdOCuND6fzLnZtmSnah7ddnUsw91+kfQ/1L0y77FLWeu/+h67Iovuz
aIeB7v9MwimVBXmnM9JGII5ThiR7OpNI29gvKBKt20AiW6p6QfqESMS5/s/5
I5c3rT+sFLY7on2ntVSlt1CBDkz+zsusc45ORKy1nUcY8Ner1/dvJIJbkbkf
tBvjeLE9fvBhYnRbTODoh3CGw69mjJ2AZOnK5HmphfiOIt7ZvGMTCvFXsCor
9bN1pt1IW0CrcIKa0xNCfqlIt3BX5gwpQK51KpEisC41JYRrmt74XnZeC/ay
X36Jrv34KBW5KFiv4ZaO/RaJxJYTSTaMnksEu6Y1lSYWoA14HCfIXEORFbKH
VCsErsKZkU9S2d7heFF5Xa60n0BGmRvKSGlHdvQb2KPyIu1M2cq1oRNl3VWp
dkQqyAqHhPdT+jP1gslH5qKZ4pm0mPgVlXqghZl1IeJ4W64z44mdMTt+AZ4R
NjjFycy4rDNtgozPO8fsadp7uIJBdqb1UM7KMKGlWSzLTS81FO1t2bGgwftp
60eISMpdm1zLlXLwC1aNbZDuaa0qsa1o13QQm9JphD9ECR4XtSlgVfCUyyfT
SK8gtpej2O79F+zVVrLGlMtjoGuxR8V2bdO1W2JjubRrvSLnRkxwAO/ZUMM0
0BbY3EQmRaq8yWSJTSWxss2g+GzqrOxy2BcRxG4XLZXBhf3WB4/gg2CNfLNV
/iHxDWxUgGYgRPr84NUieN7eAuwacLd77+JOmUFtKDzSm0VNX1TdCqSRstSU
Scbkg/jFrsmgqt7ISqM21YuiK8EyHNs2DpaKPq0yZz3SpCkKTeoVpkLupVwf
lUNBkup2rXW9W4WQtKiuC8o10RLmE583TP9Dm3jOwcHTNLMFwQfhIFLAhcKE
wk0KBjXUoufyTQmPI1fMdVPaDVehBLLXmd5zucgR80t1J5YcPjZaFlUOaGFJ
QWeIzcgrJRy96WuEVwWtRlJNkQBypuc7lEPTclQjsdRaw/4T4u71yparXpeo
bHod4zqz7DIc1CEP9y475pPiMTjQxMyoc0HghHWj65VxtmZhiQGd2ZBNQkBx
bo8n+C19oJfdIaBFGQeRgIW+ZYkAvZCx2YmJKHyoJf6c/mdnHNs8hPmw4Ocw
Sv1lvd+W+c73eevPdzfv+7chCgBEHh9FBALMJ8IhZOZt/DYW8vdR3HvMMNzY
Npb8biLeqlVwsrUuyySwlg89jkt+0znCKORslaVAWViLgwjOmExzFt25r/ju
Owko0nvRpa1XlBnh+aHcA7JKwqxejq4/3N2PxuGnfH/Dz7evf/hwdfv6FT3f
vb1492770K+4e3vz4R2+i/i023l5c339+v2rsPn64m/4QWYZ3Xx/f3Xz/uLd
KNTooTU4pVp4jeBIRiBHl0TqyVB3QlZi7RNkfHxkCQMOC6rtOwMhLuqn3vcd
w4F145AuAkJBNdiMv4b5nomOMCFZMBrjS36CN7CESxXWVjo3KNKbRovRIOUd
rup8Eg76/c/e1iOKtOeEF+dBHbt9VBeAJiUcQZVBfWtTlhFV9VCRvw4B4+Q5
IOMVJQcLCQmFQQwua5yUyKWRcCpy0RaNjnSWz9BlTAdUS0DRNsFrBH/ynK5C
MZjLgxhV+TNoIKdzoaD1UnOl4XDVbkXu2MMxREWW6ablsgtXhlgTBDGZiDn3
2Ohl9CGKo8L2SX6lSgK+fRAxN3OJzfiTyFGjvB/NY2zBiOEtgQS87ertewoM
/oTKXQ83MHTxFukFesqA01CWA3U4S6QfXJd3RpHAEZfHbUmnAtnDztnHjzjp
GH87thTFFOghHWJjPmFZAou9gr5O64RpvdijRSEiAy2BByCzTAVUsccjhM5z
E2N/mHWinlPdlyykbQChkqscCPamD8rewrSeP64N0cJXr+AN/fpnVHv+2YF3
amlRvQMWHDjEuBdrEBE40GcodhNQDZHF5PboLjv4a1IAjtU5sv1g2WcHEJEK
fRV1soP9yjnFRdmbTwNnGsCuID9CGlIy+5EMuDsAzw8AnekGbv6MQJRW2bI/
uLQLCFLCpQkhpWgn+prRsyTfDZaAXqzFSjbLjecPtJIA3F+vYTOOW4XkzxCX
wQTHVX8QdNyGSgm4zC064C6HjNvG3TaoSB9Z0z2tDHwIcge3AN6gro1x25My
4qh/U8pvyUha+I+k/JaModPZE7NvCWMTBCOiyUZP4SO+YsEU97uIF9eCCvXu
/mld8SfCWnqlGCLutZwcfCGlgExA6Ht0nFpL7RzYDx85ELZRG3IBZYVd/Gpu
DwzZNyTnXdRadMRtwAZ9guIdIYKg1fIzIeqdHDb9WWdUC+JXuP6uQ3o6XxCy
1AtCwdHk1BdZZC0gx4RmU7ZmMPplJAKGPHyblegJRJ02kJIH8PzDLdAVWOA6
S/Mh1FkSXH+kKRs45UOCqwBn9NTQCVFnNch6KiW8SByCWiz1kWVkFYZqE/k9
XBDteEJEiaEeysXehyZRVOc/Y3RpGtCMBooNF3s/TS9Q86E+mn6gYCKyuAAy
NA6VMw+gEXLSPBDtqTVUqmheB5yv4OFUkcQblllRA4Na/Ouvv2LNn17fy8Mo
CpWQw6PJEV6/BSae94tpqkGlluvvXP4GFKFa0lORs+lU3vwFby4DikjugUh+
ezvWImfohHY4W84RuR8TZJP/Pj6dTgOlOoy55hDMEkyDWXloONqWE5Tm/pc5
zTY/jcZhxSDn05qdAXlV73X96lABaSHHR3wbUjre/v1ken46lkfT2clYHp+8
OP1HXIGUSJ9n07E8wf8vpv2HkEWI4NEMe6fTniYnBtozGvVrQ4jT2h3zHJW0
jF/0cvNHk9PSvMhPs2KWJkfpqU5OTo5miZqmZ0lxWrx8ef5SnU7zWSQXzlWB
nb0gTP5/uORJJfAXBlVBmOOj4+GXAe/x5eP4aywfZ0fF9OQsS9RJCpaVmiVn
x/o0mZ3Ozqcvj/Oj8zz7Nst/e5plzoRPsTw9n02Pz0+eZvqS/Iqzs2pUhr51
KwX/7C3EOWNojRFimfZzkqCWpXOG3SwMslVjJn080biSlx0G/3xKP5HaV3bj
62G7pLm4BbwaCvJvnzrcvy+hoCdKD9wb1aGqQuN8lSLEO6TFSl41vqtowRvu
Hj7/bPrPdxpVjrr/S+oh8jiQQPd4GQcQNC0gdeuPAA+GsCt1cWgFaC5Bw0ke
vH3R+E7ktUIeoSoi0LlaR1WgQ5Ej7M9t0DBzU7q3aNU0je2ZompbQJAwlQzY
XcUebX9W1id2tFWoOT2zlJqhRMKoMQHX1MrFKQgaolInKQjmgroWHyoU3k54
1nvx/uILdVCjfc2NG6VJ9JuU78NXdNo3r25+M3OGto7GM106KO1uQIXAmeAS
RFcaj48ijKAJiLGds4farkudL8Kkg9p7xWXRSnltHrS8qDpAH12P5WtnHuSP
psyBxv/c0ZRE/hF529JrUsQtVTzw0/8EKwLKMuRFiwWNVfrSXECfxMEEfsaK
vVbugQYOZKOl4hGUTBG2jYtzkHhdRSaEKB4g05tyw3q9pMFfP+O6o2yO58/6
d8j1I7lWnBMDTDxp7d2Il6dfcEhySgV+1+Rc9YL18qB1IwgooBBzd3vRU9s2
YluCcMgUkgOdRofBGaFB4I6WWA6lvtwk1JchCLme+w4gGuU9lqsRqGSKfNy0
wehLXTaoXWWR5AZd0Go3u0w3u4ul570i9kcTvofZcA5P+IoamIkcIIWx3Ngu
hpbKQb1FjIK53ayT4BV3x4fYtXsN/YbGbx/oBIRSwJL5YKoqt/PIGC+0aAcl
92y0lwS+LlgFx+Q49TQIJo1LvkisiXxpCs2Y/kBPFhNKn6PfQB6jZ5Ivi2Cz
4dh0dw2ytGsYNmDbDXcmpK6MKPINyA6WSTIQEHNB8w9SE/jIlr3TomUhqETT
81evbu4Sem8LENxrkyDzJYSz1b5qeeJDlvA8/5NxisTol8KIMDf5Gl0LL5nB
ku4XWkvWjBO0XbZEkPEcATnNdRlPPinE8HtXDeJq/z59kNYrs1i2nIyfnInx
BZsa3o+s1YYOoTlWUPVg4PnZ5YfheWtpKMBHW97/EHF84Wz1ZR7fbu7Hk9E3
sLXP6MAHhob5G0u5iCZFvb+Irb9EuP8kaVY9AokhMN0oqmBZurwrtzcfJzx1
vCARsLEr6VI+6sx2pDOGHtFzvqKAg3CQGNB8NvCxrU+Ztp/x0UhuEwaWKtwT
H6yXBqllTZ4guMavqfqmWm5Hc+DzHTI/veepArOJlMY3/dqFWfPJ9EQewGpI
GqgPPNyIzQ3MxGsd4giOn1JTJWIUwrOazTe0SfLAQP01meEk2jVJa5Oce1WG
HzGQEFMX/gHn/NDFAsMl9cflhieg5IgHKNDIX3FMsHdoyCjP/re/xYvZXqFk
7W4k+WpvgEaGWwEk3vaXaOGmNL4XS7XSchH+sQffaKD6UDdbQauhSjcKSTXr
SsX3YQkDkTCsLRk6AIfy0LMQheHCSHa0PU3pM11TO409ge6nSDfeZm0LwmSr
kdxqX/+uHU6k+UoMyueEnNF1JBGAMgz610xDM1f9zVds4qvgO5Snw4CY0Awx
SsCcbqXo+ixGEuxoM0OFTzS2DXeroQeniYaXB6lleBcSXbzS213FoJKZlm+y
nX8WylO40nnQgq8f9wUNd0JxNLJ/YRf/rcTeCVEbApBQV00IQL5DDFN4ug9t
YFtHN4RRW41FVYGsE/EvtFKWOWQkAAA=

-->

</rfc>

