<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Healtch Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a “health check response” format for API HTTP clients.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-healthcheck/">https://datatracker.ietf.org/doc/draft-inadarei-api-healthcheck/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Vast majority of modern APIs, that drive data to web and mobile applications use
HTTP <xref target="RFC7230"/> as a transport protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for failover or circuit-breaking, are essential
for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific rformats creates significant
challenges, disallowing any meaningful interoprerability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC7159"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="api-health-response" title="API Health Response">

<t>An API Health Response Format (or, interchangeably, “health check response”)
uses the format described in <xref target="RFC7159"/> and has the media type
“application/vnd.health+json”.</t>

<t><spanx style="strong">Note: this media type is not final, and will change before final publication.</spanx></t>

<t>Its content consists of a single mandatory root field and several optional
fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 4xx - 5xx range MUST be
used.  <vspace blankLines='1'/>
In case of “warn” status, additional information SHOULD be provided, utilizing
optional fields of the response.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
  <t>memory: (optional) array of sizes for the  currently utilized resident memory
(in kilobytes) on each of the logical nodes backing the service. Logical node
can be a physical server, VM, a container or any other logical unit that makes
sense for service publisher.</t>
  <t>cpu: (optional) array of cpu utiliation percentage on each of the logical
nodes backing the service. Logical node can be a physical server, VM, a
container or any other logical unit that makes sense for service publisher.</t>
  <t>uptime: (optional) current uptime in seconds since the last restart</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional information
regarding the various sub-components of the service.</t>
  <t>links: (optional) an array of objects containing link relations and URIs 
<xref target="RFC3986"/> for external links that MAY contain more information about the 
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.</t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "serviceID": "service:authz",
    "description": "health of authz service",
    "status": "pass",
    "memory": [4096, 1024, 3456],
    "cpu": [20, 40, 50],
    "uptime": "1209600",
    "notes": [""],
    "output": "",
    "details": [
      {
        "id": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "name": "sub-component-X",
        "status": "pass",
        "value": "12313",
        "output": ""
      },
      {
        "id": "3c1f048c-a4be-4aa2-83e6-2629073d19dc",
        "name": "sub-component-Y",
        "status": "warn",
        "value": "0920394",
        "output": "Close to capacity"
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ]
  }
]]></artwork></figure>

</section>
<section anchor="another-subtitle" title="Another subtitle">

<t>Lorem Ipsum</t>

</section>
<section anchor="final-subtitle" title="Final subtitle">

<t>Lorem ipsum</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json will be submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5226" target='https://www.rfc-editor.org/info/rfc5226'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='T. Narten'><organization /></author>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'><organization /></author>
<date year='2008' month='May' />
<abstract><t>Many protocols make use of identifiers consisting of constants and other well-known values.  Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec).  To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority.  For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).</t><t>In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made.  If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role.  This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.</t><t>This document obsoletes RFC 2434.  This document specifies an Internet Best  Current Practices for the Internet Community, and requests discussion and  suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='RFC' value='5226'/>
<seriesInfo name='DOI' value='10.17487/RFC5226'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7159" target='https://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>
<section anchor="frequently-asked-questions" title="Frequently Asked Questions">

<section anchor="why-not-use-insert-other-health-check-format" title="Why not use (insert other health check format)?">

<t>There are a fair number of existing health check formats. However, these formats
have generally been optimised for particular use-cases, and less capable of
fitting into general scenarios, optimized for interoperability.</t>

</section>
<section anchor="why-doesnt-the-format-allow-references-or-inheritance" title="Why doesn’t the format allow references or inheritance?">

<t>Implementing them would add considerable complexity and the associated
potential for errors (both in the specification and by its users). For the sake
of interoperability and ease of implementation this specification doesn’t
attempt to create the most powerful format possible.</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAKDcXFoAA5VabXPbuBH+jl+B0X2ok4qyJDuOrb66TtK4jePUdnq9uenc
gCQk4UwSLEBKUTq+395nF6BEJU5yvcnFNAks9n2fXSRJEtGYptAz+VqrosmW
8mKps3t5o31tK6/lK+tK1ci5dfL13d07ef7u0guVpk6vZiK3WaVKbM6dmjeJ
qVSunDaJqk2yJHrLJCNyyXgsctVg4XQ8ORUZHhfWbWbSVHMrhKndTDau9c10
PD4bTwWIqJn8q660U4VYW3e/cLatZ+Jeb/BbPpOXVaNdpZvkBZ0shG9Ulf+k
ClvhkI32ojYz+WNjs6HEX6bKddUMpbeucXru8bQp40PjTIZPmS1rFR9KLMYn
UxWm0v8WQrXN0rqZkImQ+M9UHgyM5NsgrV+uTGH4S1DGpVP3hXnkM87SupnJ
yeRYPmuW8nylq1bzp8w0UMdbvZY/QNrwyrZVQ0p6X5lG5/K2gdo8f9KlMgW0
xwf9eUG/jcA3f2sdJF82TT07PFyv16O5036ZFq1LPa05FKJik5qVhkTy5tXF
dDI5i49HZ6cn8fHZdLp9PDs9jY/PJ8+6tc+nR8czGA8m3KeHD+P4eHJ6dLp7
O8HyJEmkSqEJKFuIu6XxEl7Ukspl7WxtvfZSyUFwH8nuI130xoGc79wRnhhc
MisMGWwUiFe20T+9pb8a+9ONVrl2Xoin4EC+fHF5d30zk3WhFVzb6dKutGyI
B6+zxthKphqktazbtDBwU7x6SlxqabxvwVlhfDidd7Hby0zRPrxtq1yCud+T
9j3UvzDNsk1Z611oHLp5FkODRTsMdP84CqeUFuSdzkgbgThO6ZPs6IwibWM/
o0i0bgKJbKmqBekTIhHn+v/nj8LBNP6wVNjuiPat1lIV3kIFOjD5Gy+z1jk6
EXHYtB4hwl8vX969kgh8Rea+126I48X2+N6HkdHNfGTd4hDOcPjFbLITkCxd
mjwvtBDfUTZwNm/ZhEL8E6zKUv1sHYJK2jm0CieoOHUhHSwV6RbuypwhPci1
TiXSB9alpoBwdd0Z38vWa8Fe9t//Rtd+eJCKXBSsV3BLx36LJGOLkSQbRs8l
gm3dmFITC9AGPI6TZ66hyBKZRaoVAlfhzMgnqWzvcLwovS5W2o8go8wNZau0
JTv6DexRepG2pmjk2tCJsmrLVDsiFWSFQ8L7KTWaasHkI3PRTPFMWkz8ilLd
08LMuhBxvC3XmfHEzpAdfw6eETY4xSFruaw1TYJqwDuH7Gnae7iCQeam9VDO
yjChpVksi00nNRTtbdGyoMH7aesHiEjKXZtcy5Vy8AtWja1RCmitKrBt3qzp
IDal0wh/iBI8LmpTwKrgKZePppFOQWwvR7Hd+S/Yq6xkjSmXx0DXYo+KbZu6
bbbEhnJp13pFzo2Y4ADes6GGaaAtsLmJTIpUeZPJApsKYmWbQfHZVFnR5rAv
IojdLloqgwv7rQ9O4INgjXyzUf4+8TVsNAfNQIj0+d6rRfC8vQXY1eNu997F
nTKD2lBmpDeLir6oqhFII0WhKZMMyQfxi12TQVW1kaVWFZ7nbQGW4di2drBU
9GmVOeuRJs18rkm9wpTIvZTro3IoSFLdrLWudqsQkhaVd0G5JlrCfOTz+um/
bxPPOTh4mma2IHgvHEQKKDE3oaiTgkENteipfFXA48gVc10XdsNVKIHsVab3
XC5yxPxS3Yklh4+NlkWVA5JYUtAZYjPySglHb7oa4dWcViOppkgAOdPzLcqh
aTiqkVgqrWH/EXH3cmWLVadLVDaggxDXmWWX4aAOebhz2SGfFI/BgSZmRp0L
Ai6sG12tjLMVC0sM6MyGbBICinN7PMFv6QPZ7A4BLco4iAQs9A1LBFiGjM1O
TEThQw3x5/R/WuPY5iHM+wU/h1Gqz+v9tsy3vstbf7u9ftu9DVEAIPLwICIQ
YD4RDiEzb+O3tpC/i+LOY/rhxrax5Hcj8VqtgpOtdVEkgbW873Fc8uvWEUYh
ZystBcrCWhxEcMZkmrPozn3Fd99JQJHOiy5staLMCM8P5R5wVhKe9XJw9f72
bjAMP+Xba36+efmP95c3L1/Q8+3r8zdvtg/ditvX1+/f4LuIT7udF9dXVy/f
vgibr85/wA8yy+D63d3l9dvzN4NQo/vW4JRq4TWCIxmBHF0SqSdD3QlZibVP
kPHhgSUMOCyotusahDivHnvfdRMH1g1DuggIBdVgM/wS5nsiWsKEZMFojM/5
Cd7AEi5VWFvq3KBIb2otBr2Ud7iq8lE46Lc/e1sNKNKeEl6cBXXs9lFdAJqU
cARVBPWtTVFEVNVBRf7aB4yjp4CMl5QcLCQkFAYxuKxxUiKXRsIpyUUbNEHS
WT5DFzEdUC0BRVsHrxH8yXO6CsVgJg9iVOVPoIGczoWC1kvNlYbDVbsVuWMH
xxAVWabrhssuXBlijRDEZCLm3GOjl9GHKI7mtkvyK1UQ8O2CiLmZSWzGn0QO
auX9YBZjC0YMbwkk4G1bbd9TYPAnVO6qv4Ghi7dIL9BTBpyGshyow1ki/eC6
vDOKBI64PG5LOhXIDnZOP3zASUf427GlKKZAD+kQG/MRyxJY7BT0ZVrHTOvZ
Hi0KERloCTwAmWUqoIo9HiF0npsY+/2sE/Wc6q5kIW0DCBVc5UCwM31Q9ham
dfxxbYgWvnwBb+jWP6Ha858WvFO7i+odsGDPIYadWL2IwIE+Q7EbgWqILCa3
R3fZwl+TOeBYlSPb95Z9cgARKdFXUd/a26+cU1yUvfnYc6Ye7AryI6QhJbMf
yYC7A/B8D9CZbuDmTwhEaZUtu4MLu4AgBVyaEFKKdqKrGR1L8k1vCejFWqxk
vdx4/kArCcD98wo247hVSP4McRlMcFx1B0HHTaiUgMvckAPucsi4bdxtg4r0
kdXt48rAhyB3cAvgDeraGLc9KiOO+pVSfktG0sL/JeW3ZAydzp6YXUsYmyAY
EU02egof8RULprjfRby4BlSod/eP64o/EdbSK8UQca/l5OALKQVkAkLfo+PU
WmrnwH74yIGwjdqQCygr7OJXc3tgyL4hOe+i1qIjbgI26BIU7wgRBK0WnwhR
7eSw6c86o1oQv8L1dx3S4/mCkKVeEAqOJqe+yCJrATkmNLeyFYPRzyMRMOT+
26xETyDqtIGU3IPn72+ArsAC11maD6HOkuD6A03gwCkfElwFOKOjhk6IOqte
1lMp4UXiENRiqY8sI6swVBvJd3BBtOMJESWGOigXex+aRFGd/4TRpalBMxoo
Nlzs/TS9QM2H+mj6gYKJyOICyNA4VM48gEbISbNCtKfWUKmiWR5wvoKHU0US
r1hmRQ0MavEvv/yCNX99eScPoyhUQg4nowlevwYmnnWLaapBpZbr70x+BYpQ
LemoyOl4LK//jjcXAUUkd0AkX9+OtcgZOqEdzhYzRO6HBNnkD0cn43GgVIUx
1wyCWYJpMCsPDQfbcoLS3P0yo7nnx8EwrOjlfFqzMyCv6ryuWx0qIC3k+Ihv
Q0rH2x+Px2cnQzkZT4+H8uj42cm/4wqkRPo8HQ/lMf5/Nu4+hCxCBCdT7B2P
O5qcGGjPYNCtDSFOa3fMc1TSMn7Ryc0fTU5L83l+ks2naTJJT3RyfDyZJmqc
nibzk/nz52fP1ck4n0Zy4VwV2NkLwuRf/SWPKoG/MKgKwhxNjvpferzHlw/D
L7F8lE3m4+PTLFHHKVhWapqcHumTZHoyPRs/P8onZ3n2bZZ/eJxlzoSPsTw+
m46Pzo4fZ/qC/Iqzs6oVDbW3UvDPzkKcM/rWGCCWaT8nCWpZWmfYzcIgW9Vm
1MUTjSt52WHwz8f0E6l9YTe+HjZLmotbwKu+IL/61P7+fQkFPVF64N6oClUV
GudrFiHeIC2W8rL2bUkLXnH38Oln032+1ahy1P1fUA+Rx4EEuseLOICgaQGp
W38AeDCEXamLQytAcwkaTvLg7bPGdySvFPIIVRGBztU6qgItihxhf26D+pmb
0r1Fq6ZpbM8UVdMAgoSpZMDuKvZo+7OyLrGjrULN6Zil1AwlEkaNCbiiVi5O
QdAQFTpJQTAX1LX4UKHwdsSz3vO355+pgxrtK27cKE2i36R8H76i075+cf3V
zBnaOhrPtGmvtLseFQJngksQXWk8PIgwgiYgxnbO7iu7LnS+CJMOau8Vl0Ur
5ZW51/K8bAF9dDWUL525l9+bIgca/1tLUxL5F+RtS69JETdU8cBP9xOsCCjL
kBctFjRW6UrzHPokDkbwM1bslXL3NHAgGy0Vj6BkirCtXZyDxKssMiFE8QCZ
3hQb1usFDf66GdctZXM8f9K/Q67vybXinBhg4lFr70a8PP2CQ5JTKvC7Jueq
FqyXe61rQUABhZi72/OO2rYR2xKEQ6aQHOg0OgzOCA0Cd7TEcij1xSahvgxB
yPXctwDRKO+xXA1AJVPk46YJRl/qokbtKuZJbtAFrXazy3Szu1h62ilifzTh
O5gN5/CEr6iBGckeUhjKjW1jaKkc1BvEKJjbzToJXnF3fIhdu9fQb2j89oFO
QChzWDLvTVXldh4Z44UW7aDkno32ksCXBSvhmBynngbBpHHJF4kVkS/MXDOm
P9CjxYjS5+AryGPwRPJlEWzWH5vurkGWdg3DBmy74c6E1JURRb4B2cEySQYC
Yp7T/IPUBD6yZee0aFkIKtH0/MWL69uE3ts5CO61SZD5AsLZcl+1PPEhS3ie
/8k4RWL0S2FEmJt8ja6Ml8xgQfcLjSVrxgnaLlsiyHiOgJzm2ownnxRi+L0t
e3G1f9feS+ulWSwbTsaPzsT4gk3170fWakOH0BwrqLo38Pzk8sPwvLUwFOCD
Le+/izh+7mz5eR7fbu7Gk9E3sLXL6MAHhob5G0u5iCZFnb+Irb9EuP8oaVY9
AokhMN0oqmBZurwrtjcfxzx1PCcRsLEt6MI+6sy2pDOGHtFzvqCAg3CQ6NF8
0vOxrU+Zppvx0UhuEwaWKtwTH6yXBqllTZ4guMavqfqmWm5Hc+DzDTI/veep
ArOJlMb3+tqFWfPx+FgewGpIGqgPPNyIzQ3MxGsd4giOn1JTJWIUwrPqzTe0
SfLAQN01meEk2tZJY5Oce1WGHzGQEFPn/h7n/KONBYZL6vfLDU9AyREPUKCR
v+KYYO/QkFGe/Km7xYvZXqFk7W4k+Wqvh0b6WwEkXneXaOGmNL4XS7XSchH+
IQjfaKD6UDdbQquhStcKSTVrC8X3YQkDkTCsLRg6AIfy0HMu5oYLI9nRdjSl
z3RF7TT2BLofI914m7UtCKOtRnKrffWbpj+R5isxKJ8TckbXkUQAyjDoXzMN
zVx2N1+xiS+D71CeDgNiQjPEKAFzupWi67MYSbCjzQwVPlHbJtythh6cJhpe
HqSW4V1IdPFKb3cVg0pmGr7Jdv5JKE/hSudeC75+3Bc03AnF0cj+hV38txJ7
J0RtCEBCXdYhAPkOMUzh6T60hm0d3RBGbdUWVQWyjsT/ADSegXGAJAAA

-->

</rfc>

