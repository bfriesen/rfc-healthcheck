<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications
use HTTP <xref target="RFC7230"/> as a transport protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific rformats creates significant
challenges, disallowing any meaningful interoprerability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC7159"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>An API Health Response Format (or, interchangeably, “health check response”)
uses the format described in <xref target="RFC7159"/> and has the media type
“application/vnd.health+json”.</t>

<t><spanx style="strong">Note: this media type is not final, and will change before final publication.</spanx></t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 4xx - 5xx range MUST be
used. In case of the “warn” status, additional information SHOULD be provided,
utilizing optional fields of the response.</t>
  <t>version: (optional) public version of the service.</t>
  <t>release_id: (optional) in well-designed APIs, backwards-compatible changes in
the service should not update a version number. APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of an API may change much more frequently, which leads
to the importance of having separate “release number” or “release_id” that is
different from the public version of the API.</t>
  <t>memory: (optional) array of sizes for the  currently utilized resident memory
(in kilobytes) on each of the logical nodes backing the service. Logical node
can be a physical server, VM, a container or any other logical unit that makes
sense for service publisher.</t>
  <t>cpu: (optional) array of cpu utiliation percentage on each of the logical
nodes backing the service. Logical node can be a physical server, VM, a
container or any other logical unit that makes sense for service publisher.</t>
  <t>uptime: (optional) current uptime in seconds since the last restart</t>
  <t>connections: (optional) current number of active connections</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional information
regarding the various sub-components of the service.</t>
  <t>links: (optional) an array of objects containing link relations and URIs 
<xref target="RFC3986"/> for external links that MAY contain more information about the 
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "status": "pass",
    "version" : "1",
    "release_id" : "1.2.2",
    "memory": [4096, 1024, 3456],
    "cpu": [20, 40, 50],
    "uptime": "1209600.245",
    "connections" : 25,
    "notes": [""],
    "output": "",
    "details": [
      {
        "id": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "name": "sub-component-X",
        "value": "12313",
        "status": "pass",
        "output": ""
      },
      {
        "id": "3c1f048c-a4be-4aa2-83e6-2629073d19dc",
        "name": "Cassandra test query duration in ms",
        "value": "250",
        "status": "warn",
        "output": "Response time over target of less than 100ms"
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ],
    "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
    "description": "health of authz service"
  }
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json is being submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7159" target='https://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </back>

<!-- ##markdown-source:
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
+KVWcxLtmrQ1acFN+f8DNVWCjIEkAAA=

-->

</rfc>

