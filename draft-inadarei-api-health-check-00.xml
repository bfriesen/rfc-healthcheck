<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications
use HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>The API Health Response Format (or, interchangeably, “health check response
format”) uses the JSON format described in <xref target="RFC8259"/> and has the media type
“application/vnd.health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
The value of the status field is tightly related with the HTTP response code
returned by the health endpoint. For “pass” and “warn” statuses HTTP response
code in the 2xx-3xx range MUST be used. For “fail” status HTTP response code
in the 4xx-5xx range MUST be used. In case of the “warn” status, endpoint
SHOULD return HTTP status in the 2xx-3xx range and additional information
SHOULD be provided, utilizing optional fields of the response.  <vspace blankLines='1'/>
A health endpoint is only meaningful in the context of the component it
indicates the health of. It has no other meaning or purpose. As such, its
health is a conduit to the health of the component. Clients SHOULD assume that
the HTTP response code returned by the health endpoint is applicable to the
entire component (e.g. a larger API or a microservice). This is compatible
with the behavior that current infrastructural tooling expects:
load-balancers, service discoveries and others, utilizing health-checks.</t>
  <t>version: (optional) public version of the service.</t>
  <t>releaseID: (optional) in well-designed APIs, backwards-compatible changes in
the service should not update a version number. APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of an API may change much more frequently, which leads
to the importance of having separate “release number” or “releaseID” that is
different from the public version of the API.</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an object representing status of sub-components of the
service in question. Please refer to the “The Details Object” section for more
information.</t>
  <t>links: (optional) an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.  If a “self” link is provided, it MAY be used by clients to
check health via HTTP response code, as mentioned above.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
</list></t>

</section>
<section anchor="the-details-object" title="The Details Object">

<t>The “details” object MAY have a number of unique keyes, one for each logical
sub-components. Since each sub-component may be backed by several nodes with
varying health statuses, the key points to an array of objects. In case of a
single-node sub-component (or if presence of nodes is not relevant), a
single-element array should be used as the value, for consistency.</t>

<t>The key identifying an element in the object should be a unique string within
the details section. It MAY have two parts: “{componentName}:{metricName}”, in
which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not 
contain a colon, in the name, since colon is used as a separator.</t>
  <t>metricName: (optional) name of the metrics that the status is reported for.
MUST not contain a colon, in the name, since colon is used as a separator and
can be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value eside of the equation, each “component details” object in the array
MAY have one of the following object keys:</t>

<t><list style="symbols">
  <t>componentId: (optional) unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>
  <t>componentType: (optional) SHOULD be present if componentName is present. Type
of the component. Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>component</t>
          <t>datastore</t>
          <t>system</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>
  <t>metricUnit: (optional) SHOULD be present if metricValue is present. Could be
one of:
  <list style="symbols">
      <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>time: the date-time, in ISO8601 format, at which the reading of the
metricValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>
  <t>output: (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component.</t>
  <t>links: (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component.</t>
</list></t>

</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseID": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "details": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "metricValue": 250,
        "metricUnit": "ms",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "type": "datastore",
        "metricValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "metricValue": 1209600.245,
        "metricUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "metricValue": 85,
        "metricUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "metricValue": 85,
        "metricUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "metricValue": 8.5,
        "metricUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "metricValue": 5500,
        "metricUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json is being submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIABzEtloAA+1bbXMbOXL+Pr8CRX842+FQFPXOJFfR2d61LrblWHKuLldb
W+AMKGI1HDCDGVJcl7buhyR/7n5Jnu4GhkOJti91u6m6y+2HNTUDNBrdT78C
k6ZpUtu6MGP12uiinqkXM5Pdqg/GL1zpjfrGVXNdq6mr1Ovr6/fq/P2FT/Rk
UpnlOMldVuo55uaVntapLXWuK2NTvbDpjMmlGZFLh8Mk1zUGjob7p0mGnzeu
Wo+VLacuSeyiGqu6anw9Gg7PhqMERPRYfWtKU+kiWbnq9qZyzWKc3Jo1/srH
6qKsTVWaOn1JKyeJr3WZf68LV2KRtfHJwo7VH2qX9RX+Z8vclHVfeVfVlZl6
/FrPw4+6shleZW6+0OHHHIPxypaFLc13SaKbeuaqcaLSROE/W3owMFDvZLd+
trSF5TcijItK3xZ2x2usZUw9Vvv7h+oIoj5fmrIx/CqzNcTxzqzU77FbeeSa
siYhfSxtbXJ1VUNsnl+ZubYFpMcL/csN/TUA3/yuqbDzWV0vxnt7q9VqMK2M
n02Kppp4HpOUrFG7NNiQ+vDNi9H+/ln4eXB2ekw/n+D30Wh0HB4fnZ2ehp8n
o4PD8PN0dIR5CalwmyDGDMPP49ODzsz9uMzBAc1M01TpCYQCuSfJ9cx6BUA1
JH21qNzCeeOVVt5US5sZJYBSDChVRXxOd+BzILRLV5vv39H/avf9B6NzU/kk
ef4cHKhXLy+uLz+M1aIwGlQqM3dLo2riwZustq5UEwOiRi2aSWGBWDx6/pzY
NMp634C1wnpZmKexCahM00Q8bcpcga9/Ik14qOLG1rNmQhrYi2ayV02zYCa8
qT2h++uBrDJ3IF+ZjMQhxLFKl2SkMwi0rXtEkWh9EBLZTJc3JFDsiTg3/3v+
yDRs7ffmGtMron1ljNKFdxCBESZ/5VXWVBWtCJusGw9z4bcXr66/UXACmvR9
a6o+lk/a5TsvBtbU04GrbvaAhr2veBbeISl7bvO8MEnyhFxD5fKGlSiSXIJf
Ndc/uApWptwUogUWSsYKuLZLW94wa/AVamUmCr4EYya2wO4Wi6h+nzSACqPs
06eA8/t7pT3tz1aEWfgaVwwULRrgSqSaRW3nhhbGQG8SWddAhnM4GKWXsF+N
1QJ3JK3usvRg7k2xNH6A3ancktOaNFBh4tdQxdyrSWOLWq0srajKZj4xFZGi
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

-->

</rfc>

