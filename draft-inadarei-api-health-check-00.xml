<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications
use HTTP <xref target="RFC7230"/> as a transport protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific rformats creates significant
challenges, disallowing any meaningful interoprerability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC7159"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>An API Health Response Format (or, interchangeably, “health check response”)
uses the format described in JSON <xref target="RFC7159"/> encoding and has the media type
“application/vnd.health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 4xx - 5xx range MUST be
used. In case of the “warn” status, additional information SHOULD be provided,
utilizing optional fields of the response.</t>
  <t>version: (optional) public version of the service.</t>
  <t>release_id: (optional) in well-designed APIs, backwards-compatible changes in
the service should not update a version number. APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of an API may change much more frequently, which leads
to the importance of having separate “release number” or “release_id” that is
different from the public version of the API.</t>
  <t>uptime: (optional) current uptime in seconds since the last restart</t>
  <t>connections: (optional) current number of active connections</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional
information regarding the various sub-components of the service.</t>
  <t>links: (optional) an array of objects containing link relations and URIs 
<xref target="RFC3986"/> for external links that MAY contain more information about the 
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "status": "pass",
    "version" : "1",
    "release_id" : "1.2.2",
    "uptime": "1209600.245",
    "connections" : 25,
    "notes": [""],
    "output": "",
    "details": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentName": "Cassandra",
        "componentType" : "datastore",
        "metricName" : "responseTime",
        "metricValue": 250,
        "metricUnit" : "milliseconds",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentName": "Cassandra",
        "type" : "datastore",
        "metricName" : "connections",
        "metricValue": 75,
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "cpu",
        "type" : "system",
        "metricName" : "utilization",
        "metricValue": 85,
        "metricUnit" : "percent",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "cpu",
        "type" : "system",
        "metricName" : "utilization",
        "metricValue": 85,
        "metricUnit" : "percent",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "memory",
        "type" : "system",
        "node" : 1,
        "metricName" : "utilization",
        "metricValue": 8.5,
        "metricUnit" : "gb",
        "status": "warn",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "componentName": "memory",
        "node" : 2,
        "type" : "system",
        "metricName" : "utilization",
        "metricValue": 5500,
        "metricUnit" : "mb",
        "status": "pass",
        "time" : "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ],
    "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
    "description": "health of authz service"
  }
]]></artwork></figure>

</section>
<section anchor="details-object" title="Details Object">

<t>Following fields MAY appear and rules SHOULD be used for the details objects of the reponse.</t>

<t><list style="symbols">
  <t>componentId: (required) unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentId MAY appear in the details, if they are from different nodes.</t>
  <t>status: (required) “pass”, “fail” or “warn”. Same semantic meaning as at  the
top level.</t>
  <t>componentName: (optional) human-readable name for the component.</t>
  <t>componentType: (optional) SHOULD be present if componentName is present. Type
of the component. Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>component</t>
          <t>datastore</t>
          <t>system</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricName: (optional) Could be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>metricValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>
  <t>metricUnit: (optional) SHOULD be present if metricValue is present. Could be
one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>data size abbreviations: kb, mb, gb, tb, or pb that respectively stand
for: kilobyte, megabyte, gigabyte, terabyte and petabyte.</t>
          <t>time abbreviations: ns, ms, s, hr, min, d, yr that respectively stand for:
nanosecond, millisecond, second, hour, day, and year.</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json is being submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7159" target='https://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </back>

<!-- ##markdown-source:
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
L/4MV+jHf60zAAA=

-->

</rfc>

