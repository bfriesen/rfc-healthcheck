<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.7 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-00" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-healthcheck/">https://datatracker.ietf.org/doc/draft-inadarei-api-healthcheck/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications
use HTTP <xref target="RFC7230"/> as a transport protocol. The health and uptime of these
APIs determine availability of the applications themselves. In distributed
systems built with a number of APIs, understanding the health status of the APIs
and making corresponding decisions, for failover or circuit-breaking, are
essential for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific rformats creates significant
challenges, disallowing any meaningful interoprerability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC7159"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="api-health-response" title="API Health Response">

<t>An API Health Response Format (or, interchangeably, “health check response”)
uses the format described in <xref target="RFC7159"/> and has the media type
“application/vnd.health+json”.</t>

<t><spanx style="strong">Note: this media type is not final, and will change before final publication.</spanx></t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<t><list style="symbols">
  <t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:  <list style="symbols">
      <t>“pass”: healthy,</t>
      <t>“fail”: unhealthy, and</t>
      <t>“warn”: healthy, with some concerns.</t>
    </list>
For “pass” and “warn” statuses HTTP response code in the 2xx - 3xx range MUST
be used. for “fail” status HTTP response code in the 4xx - 5xx range MUST be
used.  <vspace blankLines='1'/>
In case of “warn” status, additional information SHOULD be provided, utilizing
optional fields of the response.</t>
  <t>version: (optional) public version of the service.</t>
  <t>release_id: (optional) in well-designed APIs, backwards-compatible changes in
the service should not update a version number. APIs usually change their
version number as infrequently as possible, to preserve stable interface.
However implementation of an API may change much more frequently, which leads
to the importance of having separate “release number” or “release_id” that is
different from the public version of the API.</t>
  <t>serviceID: (optional) unique identifier of the service, in the application
scope.</t>
  <t>description: (optional) human-friendly description of the service.</t>
  <t>memory: (optional) array of sizes for the  currently utilized resident memory
(in kilobytes) on each of the logical nodes backing the service. Logical node
can be a physical server, VM, a container or any other logical unit that makes
sense for service publisher.</t>
  <t>cpu: (optional) array of cpu utiliation percentage on each of the logical
nodes backing the service. Logical node can be a physical server, VM, a
container or any other logical unit that makes sense for service publisher.</t>
  <t>uptime: (optional) current uptime in seconds since the last restart</t>
  <t>connections: (optional) current number of active connections</t>
  <t>notes: (optional) array of notes relevant to current state of health</t>
  <t>output: (optional) raw error output, in case of “fail” or “warn” states. This
field SHOULD be omitted for “pass” state.</t>
  <t>details: (optional) an array of objects optionally providing additional information
regarding the various sub-components of the service.</t>
  <t>links: (optional) an array of objects containing link relations and URIs 
<xref target="RFC3986"/> for external links that MAY contain more information about the 
health of the endpoint. Per web-linking standards <xref target="RFC5988"/> a link relationship
SHOULD either be a common/registered one or be indicated as a URI, to avoid
name clashes.</t>
</list></t>

<t>For example:</t>

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/vnd.health+json

  HTTP/1.1 200 OK
  Content-Type: application/vnd.health+json
  Cache-Control: max-age=3600
  Connection: close

  {
    "serviceID": "service:authz",
    "description": "health of authz service",
    "status": "pass",
    "version" : "1",
    "release_id" : "1.2.2",
    "memory": [4096, 1024, 3456],
    "cpu": [20, 40, 50],
    "uptime": "1209600",
    "connections" : 25,
    "notes": [""],
    "output": "",
    "details": [
      {
        "id": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "name": "sub-component-X",
        "value": "12313",
        "status": "pass",
        "output": ""
      },
      {
        "id": "3c1f048c-a4be-4aa2-83e6-2629073d19dc",
        "name": "Cassandra test query duration in ms",
        "value": "250",
        "status": "warn",
        "output": "Response time over target of less than 100ms"
      }
    ],
    "links": [
      {"rel": "about", "uri": "http://api.example.com/about/authz"},
      {
        "rel": "http://api.example.com/rel/thresholds",
        "uri": "http://api.example.com/about/authz/thresholds"
      }
    ]
  }
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="media-type-registration" title="Media Type Registration">

<t>TODO: application/vnd.health+json is being submitted for registration per
<xref target="RFC6838"/></t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC5988" target='https://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7159" target='https://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

