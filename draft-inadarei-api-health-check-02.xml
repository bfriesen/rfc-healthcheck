<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-inadarei-api-health-check-02" category="info">

  <front>
    <title>Health Check Response Format for HTTP APIs</title>

    <author initials="I." surname="Nadareishvili" fullname="Irakli Nadareishvili">
      <organization></organization>
      <address>
        <postal>
          <street>114 5th Avenue</street>
          <city>New York</city>
          <country>United States</country>
        </postal>
        <email>irakli@gmail.com</email>
        <uri>http://www.freshblurbs.com</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document proposes a service health check response format for HTTP APIs.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="strong">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/inadarei/rfc-healthcheck/issues">https://github.com/inadarei/rfc-healthcheck/issues</eref>.</t>

<t>The most recent draft is at <eref target="https://inadarei.github.io/rfc-healthcheck/">https://inadarei.github.io/rfc-healthcheck/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/inadarei/rfc-healthcheck/commits/master">https://github.com/inadarei/rfc-healthcheck/commits/master</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/">https://datatracker.ietf.org/doc/draft-inadarei-api-health-check/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The vast majority of modern APIs driving data to web and mobile applications use
HTTP <xref target="RFC7230"/> as their protocol. The health and uptime of these APIs
determine availability of the applications themselves. In distributed systems
built with a number of APIs, understanding the health status of the APIs and
making corresponding decisions, for failover or circuit-breaking, are essential
for providing highly available solutions.</t>

<t>There exists a wide variety of operational software that relies on the ability
to read health check response of APIs. There is currently no standard for the
health check output response, however, so most applications either rely on the
basic level of information included in HTTP status codes <xref target="RFC7231"/> or use
task-specific formats.</t>

<t>Usage of task-specific or application-specific formats creates significant
challenges, disallowing any meaningful interoperability across different
implementations and between different tooling.</t>

<t>Standardizing a format for health checks can provide any of a number of
benefits, including:</t>

<t><list style="symbols">
  <t>Flexible deployment - since operational tooling and API clients can rely on
rich, uniform format, they can be safely combined and substituted as needed.</t>
  <t>Evolvability - new APIs, conforming to the standard, can safely be introduced
in any environment and ecosystem that also conforms to the same standard,
without costly coordination and testing requirements.</t>
</list></t>

<t>This document defines a “health check” format using the JSON format <xref target="RFC8259"/>
for APIs to use as a standard point for the health information they offer.
Having a well-defined format for this purpose promotes good practice and
tooling.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="api-health-response" title="API Health Response">

<t>The API Health Response Format (or, interchangeably, “health check response
format”) uses the JSON format described in <xref target="RFC8259"/> and has the media type
“application/health+json”.</t>

<t>Its content consists of a single mandatory root field (“status”) and several
optional fields:</t>

<section anchor="status" title="status">

<t>status: (required) indicates whether the service status is acceptable or not.
API publishers SHOULD use following values for the field:</t>

<t><list style="symbols">
  <t>“pass”: healthy,</t>
  <t>“fail”: unhealthy, and</t>
  <t>“warn”: healthy, with some concerns.</t>
</list></t>

<t>The value of the status field is tightly related with the HTTP response code
  returned by the health endpoint. For “pass” and “warn” statuses, HTTP response
  code in the 2xx-3xx range MUST be used. For “fail” status, HTTP response code
  in the 4xx-5xx range MUST be used. In case of the “warn” status, endpoints
  SHOULD return HTTP status in the 2xx-3xx range, and additional information
  SHOULD be provided, utilizing optional fields of the response.</t>

<t>A health endpoint is only meaningful in the context of the component it
  indicates the health of. It has no other meaning or purpose. As such, its
  health is a conduit to the health of the component. Clients SHOULD assume that
  the HTTP response code returned by the health endpoint is applicable to the
  entire component (e.g. a larger API or a microservice). This is compatible
  with the behavior that current infrastructural tooling expects:
  load-balancers, service discoveries and others, utilizing health-checks.</t>

</section>
<section anchor="version" title="version">

<t>version: (optional) public version of the service.</t>

</section>
<section anchor="releaseid" title="releaseId">

<t>releaseId: (optional) in well-designed APIs, backwards-compatible changes in
  the service should not update a version number. APIs usually change their
  version number as infrequently as possible, to preserve stable interface.
  However implementation of an API may change much more frequently, which leads
  to the importance of having separate “release number” or “releaseID” that is
  different from the public version of the API.</t>

</section>
<section anchor="notes" title="notes">

<t>notes: (optional) array of notes relevant to current state of health</t>

</section>
<section anchor="output" title="output">

<t>output: (optional) raw error output, in case of “fail” or “warn” states. This
  field SHOULD be omitted for “pass” state.</t>

</section>
<section anchor="details" title="details">

<t>details (optional) is an object that provides more details about the status of
the service as it pertains to the information about the downstream dependencies
of the service in question. Please refer to the “The Details Object” section
for more information.</t>

</section>
<section anchor="links" title="links">

<t>links (optional) is an array of objects containing link relations and URIs
<xref target="RFC3986"/> for external links that MAY contain more information about the
health of the endpoint. Per web-linking standards <xref target="RFC8288"/> a link
relationship SHOULD either be a common/registered one or be indicated as a URI,
to avoid name clashes.  If a “self” link is provided, it MAY be used by clients
to check health via HTTP response code, as mentioned above.</t>

</section>
<section anchor="serviceid" title="serviceId">

<t>serviceId (optional) is a unique identifier of the service, in the application
scope.</t>

</section>
<section anchor="description" title="description">

<t>description (optional) is a human-friendly description of the service.</t>

</section>
</section>
<section anchor="the-details-object" title="The Details Object">

<t>The “details” object MAY have a number of unique keyes, one for each logical
downstream dependencies or sub-components. Since each sub-component may be
backed by several nodes with varying health statuses, these keys point to arrays
of objects. In case of a single-node sub-component (or if presence of nodes is
not relevant), a single-element array should be used as the value, for
consistency.</t>

<t>The key identifying an element in the object should be a unique string within
the details section. It MAY have two parts: “{componentName}:{metricName}”, in
which case the meaning of the parts SHOULD be as follows:</t>

<t><list style="symbols">
  <t>componentName: (optional) human-readable name for the component. MUST not 
contain a colon, in the name, since colon is used as a separator.</t>
  <t>metricName: (optional) name of the metrics that the status is reported for.
MUST not contain a colon, in the name, since colon is used as a separator and
can be one of:
  <list style="symbols">
      <t>Pre-defined value from this spec. Pre-defined values include:
      <list style="symbols">
          <t>utilization</t>
          <t>responseTime</t>
          <t>connections</t>
          <t>uptime</t>
        </list></t>
      <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
      <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
    </list></t>
</list></t>

<t>On the value eside of the equation, each “component details” object in the array
MAY have one of the following object keys:</t>

<section anchor="componentid" title="componentId">

<t>componentId: (optional) is a unique identifier of an instance of a specific
sub-component/dependency of a service. Multiple objects with the same
componentID MAY appear in the details, if they are from different nodes.</t>

</section>
<section anchor="componenttype" title="componentType">

<t>componentType: (optional) SHOULD be present if componentName is present. It’s
a type of the component and could be one of:</t>

<t><list style="symbols">
  <t>Pre-defined value from this spec. Pre-defined values include:
  <list style="symbols">
      <t>component</t>
      <t>datastore</t>
      <t>system</t>
    </list></t>
  <t>A common and standard term from a well-known source such as schema.org, IANA
or microformats.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="metricvalue" title="metricValue">

<t>metricValue: (optional) could be any valid JSON value, such as: string, number,
object, array or literal.</t>

</section>
<section anchor="metricunit" title="metricUnit">

<t>metricUnit (optional) SHOULD be present if metricValue is present. Could be
one of:</t>

<t><list style="symbols">
  <t>A common and standard term from a well-known source such as schema.org, IANA,
microformats, or a standards document such as <xref target="RFC3339"/>.</t>
  <t>A URI that indicates extra semantics and processing rules that MAY be
provided by a resource at the other end of the URI. URIs do not have to be
dereferenceable, however. They are just a namespace, and the meaning of a
namespace CAN be provided by any convenient means (e.g. publishing an RFC,
Swagger document or a nicely printed book).</t>
</list></t>

</section>
<section anchor="status-1" title="status">

<t>status (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="time" title="time">

<t>time (optional) is the date-time, in ISO8601 format, at which the reading of the
metricValue was recorded. This assumes that the value can be cached and the
reading typically doesn’t happen in real time, for performance and scalability
purposes.</t>

</section>
<section anchor="output-1" title="output">

<t>output (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
<section anchor="links-1" title="links">

<t>links (optional) has the exact same meaning as the top-level “output”
element, but for the sub-component/downstream dependency represented
by the details object.</t>

</section>
</section>
<section anchor="example-output" title="Example Output">

<figure><artwork><![CDATA[
  GET /health HTTP/1.1
  Host: example.org
  Accept: application/health+json

  HTTP/1.1 200 OK
  Content-Type: application/health+json
  Cache-Control: max-age=3600
  Connection: close

{
  "status": "pass",
  "version": "1",
  "releaseID": "1.2.2",
  "notes": [""],
  "output": "",
  "serviceID": "f03e522f-1f44-4062-9b55-9587f91c9c41",
  "description": "health of authz service",
  "details": {
    "cassandra:responseTime": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "componentType": "datastore",
        "metricValue": 250,
        "metricUnit": "ms",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "cassandra:connections": [
      {
        "componentId": "dfd6cf2b-1b6e-4412-a0b8-f6f7797a60d2",
        "type": "datastore",
        "metricValue": 75,
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": "",
        "links": {
          "self": "http://api.example.com/dbnode/dfd6cf2b/health"
        }
      }
    ],
    "uptime": [
      {
        "componentType": "system",
        "metricValue": 1209600.245,
        "metricUnit": "s",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z"
      }
    ],
    "cpu:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "metricValue": 85,
        "metricUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "metricValue": 85,
        "metricUnit": "percent",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ],
    "memory:utilization": [
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 1,
        "componentType": "system",
        "metricValue": 8.5,
        "metricUnit": "GiB",
        "status": "warn",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      },
      {
        "componentId": "6fd416e0-8920-410f-9c7b-c479000f7227",
        "node": 2,
        "componentType": "system",
        "metricValue": 5500,
        "metricUnit": "MiB",
        "status": "pass",
        "time": "2018-01-17T03:36:48Z",
        "output": ""
      }
    ]
  },
  "links": {
    "about": "http://api.example.com/about/authz",
    "http://api.x.io/rel/thresholds":
      "http://api.x.io/about/authz/thresholds"
  }
}
]]></artwork></figure>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Clients need to exercise care when reporting health information. Malicious
actors could use this information for orchestrating attacks. In some cases the
health check endpoints may need to be authenticated and institute role-based
access control.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type for health check response is application/health+json.</t>

<t><list style="symbols">
  <t>Media type name: application</t>
  <t>Media subtype name: health+json</t>
  <t>Required parameters: n/a</t>
  <t>Optional parameters: n/a</t>
  <t>Encoding considerations: binary</t>
  <t>Security considerations: Health+JSON shares security issues common to all JSON
  content types. See RFC 8259 Section #12 for additional information.  <vspace blankLines='1'/>
Health+JSON allows utilization of Uniform Resource Identifiers (URIs) and as such
  shares security issues common to URI usage. See RFC 3986 Section #7
  for additional information.  <vspace blankLines='1'/>
Since health+json can carry wide variety of data, some data may require privacy
  or integrity services. This specification does not prescribe any specific
  solution and assumes that concrete implementations will utilize common, trusted
  approaches such as TLS/HTTPS, OAuth2 etc.</t>
  <t>Interoperability considerations: None</t>
  <t>Published specification: this RFC draft</t>
  <t>Applications which use this media: Various</t>
  <t>Fragment identifier considerations: Health+JSON follows RFC6901 for implementing
URI Fragment Identification standard to JSON content types.</t>
  <t>Restrictions on usage: None</t>
  <t>Additional information:
  <list style="numbers">
      <t>Deprecated alias names for this type: n/a</t>
      <t>Magic number(s): n/a</t>
      <t>File extension(s): .json</t>
      <t>Macintosh file type code: TEXT</t>
      <t>Object Identifiers: n/a</t>
    </list></t>
  <t>General Comments:</t>
  <t>Person to contact for further information:
  <list style="numbers">
      <t>Name: Irakli Nadareishvili</t>
      <t>Email: irakli@gmail.com</t>
    </list></t>
  <t>Intended usage: Common</t>
  <t>Author/Change controller: Irakli Nadareishvili</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>Thanks to  Mike Amundsen, Erik Wilde, Justin Bachorik and Randall Randall for
their suggestions and feedback. And to Mark Nottingham for blueprint for
authoring RFCs easily.</t>

</section>
<section anchor="creating-and-serving-health-responses" title="Creating and Serving Health Responses">

<t>When making an health check endpoint available, there are a few things to keep
in mind:</t>

<t><list style="symbols">
  <t>A health response endpoint is best located at a memorable and commonly-used
URI, such as “health” because it will help self-discoverability by clients.</t>
  <t>Health check responses can be personalized. For example, you could advertise
different URIs, and/or different kinds of link relations, to afford different
clients access to additional health check information.</t>
  <t>Health check responses must be assigned a freshness lifetime (e.g.,
“Cache-Control: max-age=3600”) so that clients can determine how long they
could cache them, to avoid overly frequent fetching and unintended DDOS-ing of
the service.</t>
  <t>Custom link relation types, as well as the URIs for variables, should lead to
documentation for those constructs.</t>
</list></t>

</section>
<section anchor="consuming-health-check-responses" title="Consuming Health Check Responses">

<t>Clients might use health check responses in a variety of ways.</t>

<t>Note that the health check response is a “living” document; links from the
health check response MUST NOT be assumed to be valid beyond the freshness
lifetime of the health check response, as per HTTP’s caching model <xref target="RFC7234"/>.</t>

<t>As a result, clients ought to cache the health check response (as per
<xref target="RFC7234"/>), to avoid fetching it before every interaction (which would
otherwise be required).</t>

<t>Likewise, a client encountering a 404 (Not Found) on a link is encouraged to obtain
a fresh copy of the health check response, to assure that it is up-to-date.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3986" target='https://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC8288" target='https://www.rfc-editor.org/info/rfc8288'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2017' month='October' />
<abstract><t>This specification defines a model for the relationships between resources on the Web (&quot;links&quot;) and the type of those relationships (&quot;link relation types&quot;).</t><t>It also defines the serialisation of such links in HTTP headers with the Link header field.</t></abstract>
</front>
<seriesInfo name='RFC' value='8288'/>
<seriesInfo name='DOI' value='10.17487/RFC8288'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8259" target='https://www.rfc-editor.org/info/rfc8259'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2017' month='December' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='STD' value='90'/>
<seriesInfo name='RFC' value='8259'/>
<seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC6838" target='https://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC3339" target='https://www.rfc-editor.org/info/rfc3339'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'><organization /></author>
<date year='2002' month='July' />
<abstract><t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract>
</front>
<seriesInfo name='RFC' value='3339'/>
<seriesInfo name='DOI' value='10.17487/RFC3339'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
H4sIAI14qlsAA+1b63LbypH+j6eY4vkR2yEpiZZkiXupVWyfWNljy2vJyWZT
qdQQGIo4AgEGA4hmTjmVB9l9uTzJfl/3DAjqcpytnGwlu/EPCwRmenr63j09
o9EoafKmcFPzxtmiWZiXC5femA/Or6rSO/N1VS9tY+ZVbd5cXb03Z+/PfWJn
s9rdTpOsSku7xNystvNmlJc2s7XLR3aVjxYCbpQS3Gh/kmS2wcDJ/sFJkuLx
uqo3U5OX8ypJ8lU9NU3d+mayv3+KsQBip+anrnS1LZJ1Vd9c11W7miY3boNf
2dScl42rS9eMXnHlJPGNLbPf2KIqscjG+WSVT82vmiodGvyXl5krm6HxVd3U
bu7xtFmGh6bOU3xKq+XKhoclBuNTXhZ56X6dJLZtFlU9TcwoMfiXlx4IjM07
3a1f3OZFLl+UGOe1vSnyBz5jLeeaqTk4ODRHIPXZrStbJ5/SvAE53rm1+SV2
q6+qtmxIpI9l3rjMXDYgm5dPbmnzAtSThf7lmr/GwFu+tTV2vmia1XRvb71e
j+e184tZ0dYzL2OSUjia3zpsyHz4+uXk4OA0PD4/PTnm41d4PppMjsPrk8nJ
SXh8MXl+2L09wryELNwFiDH74fH45Hlv5kFc5vlzzhyNRsbOQBTQPUmuFrk3
EKiW1DerulpV3nljjXf1bZ46owJlRKBMHeVz/oB8jhV2WTXuN+/4X1P95oOz
mat9kjx7BgzM61fnVxcfpmZVOAsotVtWt840xMG7tMmr0swcgDqzamdFDonF
q2fPiKYzufctUCtyrwvLNFEBk1pOxNu2zAzw+kdywoMV13mzaGfkwF5Uk716
ngY1kU3tKdx/Husqywrga5eSHAocq/RBRjjjADuv7kEkrA8KIl3Y8poExZ6I
ufuf40fVyBu/t7SYXhP2pXPGFr4CCZwi+SNv0rauuSJ0smk91EW+nr+++trA
CFjy+8bVQyyfdMv3Poxz18zHVX29B2nY+4JlkR2S2cs8ywqXJF/RNNRV1goT
lZK3wNcs7bdVDS0z1RykhSyUIivAOr/Ny2tBDbbCrN3MwJZgzCwvsLvVKrLf
m9a7RKTsu++CnH/+bKzn/vKaMgtbUxVjw0WDuBJUu2rypePCGAhpExuaOdBw
CQNj7C3012K1gB2ptbMsXiy9K26dH2N3JstptGYtWeg3YMXSJ7M2Lxqzzrmi
KdvlzNUExZWGBrII0aeF5EabLXKBQ2FNIQcGJUt7w4FpVauaybTMpbknOkOR
+TlwhspglRrGq07bvBnBKcjMoQiZ8x5SkMOAczyIc5sLoEV+vSg2cdcgsa+K
Vjaqgs+pn7BF6v46z8i+GiIhpKlW8AgcawtMmzdrLtQsLBWlyCHdlQpboGYC
fgKn7BHbEQgk/Kqp1lF0gV5ZGaGYrbOg4y7ZgVK1zaptOmBDs6jW7pZyDXUQ
3d3hoQNrQC2guQlIJjPr89QUmFQQlc6Q4nNepkWbgb9QHhG4wKkUgus76TuA
9AE1SmVj/c3Ir8CjOWAqINLzo7fXKnk7AzCrh929iSYF1eBsjM+vS36wZZPA
gBSFow0ZUgTxo1qTn7bcmKWzJZ7nbQGMIdfCpyDRNq0rDz3L53NH4ib5ElaX
Vj6Qhioyc83auXI7CqpYwf1e08gEPuS/k+X6Jr/PES/GV+XMCVbYdk8Zkhni
iXmunp3kBTR4oWfm6wLyRkHM3KqoNuJ/Rth6CafTF7iAkeALuTEpJK5sdNnA
V/g3hBMLqlxONAOuQ/J7E52Dt3OOhjWdQf0zgedbOMK8EZ2GQSmdA/fHxO71
bVXcRlrCqSFEUK1OKxEYUWk1wFFgh7JSWAYL5sEiuixh9CK0ceVtXlelbJYI
uLRSW6LqJEY9rOA7+AhvtosAFu0N9AADfSM7QmwGUy0iTKAQoYb41e63bV4L
z1XJ+64+A1NK8fSDPjsHkc+tj1brZ5cX7+Jb0QGGIJ8/i30R4wU8oQwkoN1q
76rC/qMOR4npK5vwpqLcjZM39laFbO2KYqSoZX2JE1+/amtGJxS2ZUU9ua4q
LMRAhpEKbehWfL8yiEGiDL2syltaRci9+iZEtIYhrTeDtx8vrwZD/WveXcjz
h9f/9vH8w+tXfL58c/bNN91DHHH55uLjN/iehKftzJcXb9++fvdKJ789+yX+
kCmDi/dX5xfvzr4ZqGvu80LMaQWZSUSNV7ULAgmzk8LnqEUS2jNs/PxZ9kdl
CNlDzBt0cw98iAnFk6oeqq3QwASeYDPclYDOtiZK/8FTctffE4X7uKlcyG4X
6p5hobIc/n2zcsmgZ/r2dMEff+urcoDNnFOfK6DFiAlrix8SO0IphI1YUqoa
JC+mriqIRO6KzDwZqH0GhqLM9APwe9UqcF1GeRibr76KllxSFjxMzZOgHdlT
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

-->

</rfc>

